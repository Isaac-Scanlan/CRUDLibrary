2025-03-28 01:31:22.211 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-28 01:31:22.234 +00:00 [INF] Logger configured.
2025-03-28 01:31:22.350 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-28 01:31:22.351 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-28 01:31:22.357 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-28 01:31:22.491 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-28 01:31:22.692 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-28 01:31:23.373 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 01:31:23.464 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-28 01:31:23.475 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:31:23.484 +00:00 [DBG] Created DbConnection. (8ms).
2025-03-28 01:31:23.488 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:31:23.501 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:23.503 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-28 01:31:23.505 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:31:23.510 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-28 01:31:23.510 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:31:23.510 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-28 01:31:23.515 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (5ms).
2025-03-28 01:31:23.515 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (8ms).
2025-03-28 01:31:23.515 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:31:23.517 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:23.520 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:31:23.550 +00:00 [INF] Executed DbCommand (27ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:31:23.552 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:23.554 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-28 01:31:24.161 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-28 01:31:24.161 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-28 01:31:24.161 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-28 01:31:24.161 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-28 01:31:24.161 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-28 01:31:24.161 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-28 01:31:24.161 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-28 01:31:24.161 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-28 01:31:24.161 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-28 01:31:24.177 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-28 01:31:24.183 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-28 01:31:24.191 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-28 01:31:24.198 +00:00 [DBG] (App.xaml.cs): Resolved service: LoansPage
2025-03-28 01:31:24.198 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-28 01:31:24.833 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-28 01:31:24.901 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:31:25.174 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:31:25.201 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:31:25.202 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:25.202 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:31:25.202 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:31:25.202 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:31:25.203 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:31:25.207 +00:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:31:25.239 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-28 01:31:25.270 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-28 01:31:25.280 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-28 01:31:25.280 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-28 01:31:25.280 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-28 01:31:25.280 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-28 01:31:25.280 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-28 01:31:25.280 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-28 01:31:25.281 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-28 01:31:25.285 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:25.287 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 77ms reading results.
2025-03-28 01:31:25.288 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:25.288 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:31:30.532 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:31:30.560 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()
    .Include(l => l.Book)
    .Include(l => l.Borrower)'
2025-03-28 01:31:30.562 +00:00 [DBG] Including navigation: 'Loan.Book'.
2025-03-28 01:31:30.563 +00:00 [DBG] Including navigation: 'Loan.Borrower'.
2025-03-28 01:31:30.589 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        Book entity;
        LibraryMember entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        entity = 
        {
            MaterializationContext materializationContext2;
            IEntityType entityType2;
            Book instance2;
            InternalEntityEntry entry2;
            bool hasNullKey2;
            materializationContext2 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance2 = default(Book);
            entry2 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(6) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey2);
            !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
            {
                entityType2 = entry2.EntityType;
                return instance2 = (Book)entry2.Entity;
            } : 
            {
                ISnapshot shadowSnapshot2;
                shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType2 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                instance2 = switch (entityType2)
                {
                    case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                        {
                            return 
                            {
                                Book instance;
                                instance = new Book();
                                instance.<Id>k__BackingField = dataReader.GetInt32(6);
                                instance.<Author>k__BackingField = dataReader.GetString(7);
                                instance.<Description>k__BackingField = dataReader.GetString(8);
                                instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(9));
                                instance.<ISBN>k__BackingField = dataReader.GetString(10);
                                instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(11);
                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(12));
                                instance.<Title>k__BackingField = dataReader.GetString(13);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext2.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Book)
                }
                ;
                entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType2, 
                    entity: instance2, 
                    snapshot: shadowSnapshot2);
                return instance2;
            } : default(void);
            return instance2;
        };
        entity = 
        {
            MaterializationContext materializationContext3;
            IEntityType entityType3;
            LibraryMember instance3;
            InternalEntityEntry entry3;
            bool hasNullKey3;
            materializationContext3 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance3 = default(LibraryMember);
            entry3 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(14) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey3);
            !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
            {
                entityType3 = entry3.EntityType;
                return instance3 = (LibraryMember)entry3.Entity;
            } : 
            {
                ISnapshot shadowSnapshot3;
                shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType3 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                instance3 = switch (entityType3)
                {
                    case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                        {
                            return 
                            {
                                LibraryMember instance;
                                instance = new LibraryMember();
                                instance.<Id>k__BackingField = dataReader.GetInt32(14);
                                instance.<Email>k__BackingField = dataReader.GetString(15);
                                instance.<Name>k__BackingField = dataReader.GetString(16);
                                instance.<PhoneNumber>k__BackingField = dataReader.GetString(17);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext3.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(LibraryMember)
                }
                ;
                entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType3, 
                    entity: instance3, 
                    snapshot: shadowSnapshot3);
                return instance3;
            } : default(void);
            return instance3;
        };
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, Book>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
            fixup: (namelessParameter{13}, namelessParameter{14}) => 
            {
                namelessParameter{13}.<Book>k__BackingField = namelessParameter{14};
                return [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{14}, 
                    value: namelessParameter{13}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, LibraryMember>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                namelessParameter{18}.<Borrower>k__BackingField = namelessParameter{19};
                return [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{19}, 
                    value: namelessParameter{18}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:31:30.591 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:31:30.591 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:30.591 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:31:30.591 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:31:30.591 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:31:30.591 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:31:30.592 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:31:30.594 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-28 01:31:30.595 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-28 01:31:30.598 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-28 01:31:30.598 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-28 01:31:30.598 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:30.598 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 6ms reading results.
2025-03-28 01:31:30.598 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:30.598 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:31:45.192 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _inventoryPage.
2025-03-28 01:31:45.204 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:31:45.204 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:45.204 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:31:45.204 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:31:45.204 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:31:45.204 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:31:45.204 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:31:45.204 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:45.204 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:31:45.204 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:45.204 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:31:48.836 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:31:48.845 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:31:48.846 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:48.846 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:31:48.846 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:31:48.846 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:31:48.846 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:31:48.846 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:31:48.846 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:48.846 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:31:48.846 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:31:48.846 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:32:25.182 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Where(b => b.Title.ToLower().Contains(__ToLower_0))
    .Include(m => m.Loans)'
2025-03-28 01:32:25.187 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:32:25.197 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE instr(lower(b.Title), @__ToLower_0) > 0
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE instr(lower(b.Title), @__ToLower_0) > 0
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:32:25.202 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:32:25.202 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:32:25.202 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:32:25.202 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:32:25.203 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:32:25.204 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='the giver' (Size = 9)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE instr(lower("b"."Title"), @__ToLower_0) > 0
ORDER BY "b"."Id"
2025-03-28 01:32:25.206 +00:00 [INF] Executed DbCommand (3ms) [Parameters=[@__ToLower_0='the giver' (Size = 9)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE instr(lower("b"."Title"), @__ToLower_0) > 0
ORDER BY "b"."Id"
2025-03-28 01:32:25.207 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:32:25.207 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:32:25.207 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:32:25.207 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:32:25.711 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Where(b => b.Name.ToLower().Contains(__ToLower_0))
    .Include(m => m.LoanHistory)'
2025-03-28 01:32:25.711 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-28 01:32:25.717 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE instr(lower(m.Name), @__ToLower_0) > 0
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE instr(lower(m.Name), @__ToLower_0) > 0
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:32:25.719 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:32:25.719 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:32:25.719 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:32:25.719 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:32:25.719 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:32:25.719 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='john brady' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE instr(lower("m"."Name"), @__ToLower_0) > 0
ORDER BY "m"."Id"
2025-03-28 01:32:25.719 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@__ToLower_0='john brady' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE instr(lower("m"."Name"), @__ToLower_0) > 0
ORDER BY "m"."Id"
2025-03-28 01:32:25.720 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:32:25.720 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:32:25.720 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:32:25.720 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:34:31.053 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-28 01:34:31.063 +00:00 [INF] Logger configured.
2025-03-28 01:34:31.098 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-28 01:34:31.099 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-28 01:34:31.105 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-28 01:34:31.242 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-28 01:34:31.399 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-28 01:34:31.760 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 01:34:31.844 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-28 01:34:31.854 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:34:31.864 +00:00 [DBG] Created DbConnection. (8ms).
2025-03-28 01:34:31.870 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:34:31.881 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:34:31.884 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-28 01:34:31.889 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:34:31.897 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-28 01:34:31.897 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:34:31.897 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-28 01:34:31.903 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (7ms).
2025-03-28 01:34:31.904 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (12ms).
2025-03-28 01:34:31.905 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:34:31.906 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:34:31.914 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:34:31.935 +00:00 [INF] Executed DbCommand (24ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:34:31.936 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:34:31.937 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-28 01:34:32.197 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-28 01:34:32.197 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-28 01:34:32.197 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-28 01:34:32.197 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-28 01:34:32.197 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-28 01:34:32.197 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-28 01:34:32.197 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-28 01:34:32.197 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-28 01:34:32.197 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-28 01:34:32.204 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-28 01:34:32.206 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-28 01:34:32.209 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-28 01:34:32.211 +00:00 [DBG] (App.xaml.cs): Resolved service: LoansPage
2025-03-28 01:34:32.211 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-28 01:34:32.583 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-28 01:34:32.626 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:34:32.836 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:34:32.856 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:34:32.857 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:34:32.857 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:34:32.857 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:34:32.857 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:34:32.857 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:34:32.858 +00:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:34:32.886 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-28 01:34:32.918 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-28 01:34:32.924 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-28 01:34:32.924 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-28 01:34:32.924 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-28 01:34:32.924 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-28 01:34:32.925 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-28 01:34:32.928 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:34:32.930 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 70ms reading results.
2025-03-28 01:34:32.931 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:34:32.931 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:34:38.360 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:34:38.408 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()
    .Include(l => l.Book)
    .Include(l => l.Borrower)'
2025-03-28 01:34:38.411 +00:00 [DBG] Including navigation: 'Loan.Book'.
2025-03-28 01:34:38.411 +00:00 [DBG] Including navigation: 'Loan.Borrower'.
2025-03-28 01:34:38.429 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        Book entity;
        LibraryMember entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        entity = 
        {
            MaterializationContext materializationContext2;
            IEntityType entityType2;
            Book instance2;
            InternalEntityEntry entry2;
            bool hasNullKey2;
            materializationContext2 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance2 = default(Book);
            entry2 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(6) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey2);
            !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
            {
                entityType2 = entry2.EntityType;
                return instance2 = (Book)entry2.Entity;
            } : 
            {
                ISnapshot shadowSnapshot2;
                shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType2 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                instance2 = switch (entityType2)
                {
                    case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                        {
                            return 
                            {
                                Book instance;
                                instance = new Book();
                                instance.<Id>k__BackingField = dataReader.GetInt32(6);
                                instance.<Author>k__BackingField = dataReader.GetString(7);
                                instance.<Description>k__BackingField = dataReader.GetString(8);
                                instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(9));
                                instance.<ISBN>k__BackingField = dataReader.GetString(10);
                                instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(11);
                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(12));
                                instance.<Title>k__BackingField = dataReader.GetString(13);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext2.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Book)
                }
                ;
                entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType2, 
                    entity: instance2, 
                    snapshot: shadowSnapshot2);
                return instance2;
            } : default(void);
            return instance2;
        };
        entity = 
        {
            MaterializationContext materializationContext3;
            IEntityType entityType3;
            LibraryMember instance3;
            InternalEntityEntry entry3;
            bool hasNullKey3;
            materializationContext3 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance3 = default(LibraryMember);
            entry3 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(14) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey3);
            !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
            {
                entityType3 = entry3.EntityType;
                return instance3 = (LibraryMember)entry3.Entity;
            } : 
            {
                ISnapshot shadowSnapshot3;
                shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType3 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                instance3 = switch (entityType3)
                {
                    case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                        {
                            return 
                            {
                                LibraryMember instance;
                                instance = new LibraryMember();
                                instance.<Id>k__BackingField = dataReader.GetInt32(14);
                                instance.<Email>k__BackingField = dataReader.GetString(15);
                                instance.<Name>k__BackingField = dataReader.GetString(16);
                                instance.<PhoneNumber>k__BackingField = dataReader.GetString(17);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext3.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(LibraryMember)
                }
                ;
                entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType3, 
                    entity: instance3, 
                    snapshot: shadowSnapshot3);
                return instance3;
            } : default(void);
            return instance3;
        };
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, Book>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
            fixup: (namelessParameter{13}, namelessParameter{14}) => 
            {
                namelessParameter{13}.<Book>k__BackingField = namelessParameter{14};
                return [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{14}, 
                    value: namelessParameter{13}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, LibraryMember>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                namelessParameter{18}.<Borrower>k__BackingField = namelessParameter{19};
                return [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{19}, 
                    value: namelessParameter{18}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:34:38.433 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:34:38.433 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:34:38.433 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:34:38.433 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:34:38.433 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:34:38.433 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:34:38.433 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:34:38.437 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-28 01:34:38.439 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-28 01:34:38.443 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-28 01:34:38.444 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-28 01:34:38.444 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-28 01:34:38.444 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:34:38.444 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 11ms reading results.
2025-03-28 01:34:38.444 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:34:38.444 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:35:08.974 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Where(b => b.Title.ToLower().Contains(__ToLower_0))
    .Include(m => m.Loans)'
2025-03-28 01:35:08.976 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:35:08.993 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE instr(lower(b.Title), @__ToLower_0) > 0
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE instr(lower(b.Title), @__ToLower_0) > 0
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:35:08.999 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:35:08.999 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:08.999 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:35:08.999 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:35:08.999 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:35:09.000 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='the giver' (Size = 9)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE instr(lower("b"."Title"), @__ToLower_0) > 0
ORDER BY "b"."Id"
2025-03-28 01:35:09.002 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[@__ToLower_0='the giver' (Size = 9)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE instr(lower("b"."Title"), @__ToLower_0) > 0
ORDER BY "b"."Id"
2025-03-28 01:35:09.002 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:09.002 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:35:09.002 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:09.003 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:35:09.445 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Where(b => b.Name.ToLower().Contains(__ToLower_0))
    .Include(m => m.LoanHistory)'
2025-03-28 01:35:09.446 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-28 01:35:09.452 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE instr(lower(m.Name), @__ToLower_0) > 0
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE instr(lower(m.Name), @__ToLower_0) > 0
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:35:09.454 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:35:09.454 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:09.454 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:35:09.454 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:35:09.454 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:35:09.454 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='john brady' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE instr(lower("m"."Name"), @__ToLower_0) > 0
ORDER BY "m"."Id"
2025-03-28 01:35:09.454 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@__ToLower_0='john brady' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE instr(lower("m"."Name"), @__ToLower_0) > 0
ORDER BY "m"."Id"
2025-03-28 01:35:09.455 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:09.455 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:35:09.455 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:09.455 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:35:21.707 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482647' for the property 'Loan.LoanID'.
2025-03-28 01:35:21.711 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482647}'.
2025-03-28 01:35:21.712 +00:00 [DBG] SaveChanges starting for 'LibraryContext'.
2025-03-28 01:35:21.715 +00:00 [DBG] DetectChanges starting for 'LibraryContext'.
2025-03-28 01:35:21.726 +00:00 [DBG] DetectChanges completed for 'LibraryContext'.
2025-03-28 01:35:21.762 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:35:21.762 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:21.763 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:35:21.763 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:35:21.763 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:35:21.763 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='20', @p1='1', @p2='2025-04-04T01:35:13.2082295Z' (DbType = DateTime), @p3='2025-03-28T01:35:13.2027637Z' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-28 01:35:21.765 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[@p0='20', @p1='1', @p2='2025-04-04T01:35:13.2082295Z' (DbType = DateTime), @p3='2025-03-28T01:35:13.2027637Z' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-28 01:35:21.770 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482647' to '16' for entity with key '{LoanID: 16}'.
2025-03-28 01:35:21.773 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:21.774 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 8ms reading results.
2025-03-28 01:35:21.774 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:21.774 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:35:21.779 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 16}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-28 01:35:21.779 +00:00 [DBG] SaveChanges completed for 'LibraryContext' with 1 entities written to the database.
2025-03-28 01:35:23.269 +00:00 [DBG] SaveChanges starting for 'LibraryContext'.
2025-03-28 01:35:23.270 +00:00 [DBG] DetectChanges starting for 'LibraryContext'.
2025-03-28 01:35:23.270 +00:00 [DBG] DetectChanges completed for 'LibraryContext'.
2025-03-28 01:35:23.270 +00:00 [DBG] SaveChanges completed for 'LibraryContext' with 0 entities written to the database.
2025-03-28 01:35:24.290 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:35:24.290 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:24.290 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:35:24.290 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:35:24.290 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:35:24.290 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:35:24.290 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:35:24.290 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:24.290 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:35:24.290 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:35:24.290 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:38:06.727 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-28 01:38:06.739 +00:00 [INF] Logger configured.
2025-03-28 01:38:06.779 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-28 01:38:06.782 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-28 01:38:06.787 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-28 01:38:06.907 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-28 01:38:07.088 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-28 01:38:07.474 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 01:38:07.559 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-28 01:38:07.568 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:38:07.579 +00:00 [DBG] Created DbConnection. (9ms).
2025-03-28 01:38:07.584 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:38:07.594 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:07.597 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-28 01:38:07.603 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:38:07.609 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-28 01:38:07.610 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:38:07.610 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-28 01:38:07.617 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (6ms).
2025-03-28 01:38:07.618 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (11ms).
2025-03-28 01:38:07.618 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:38:07.621 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:07.627 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:38:07.652 +00:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:38:07.653 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:07.654 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-28 01:38:07.907 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-28 01:38:07.907 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-28 01:38:07.907 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-28 01:38:07.907 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-28 01:38:07.907 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-28 01:38:07.907 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-28 01:38:07.907 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-28 01:38:07.907 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-28 01:38:07.907 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-28 01:38:07.917 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-28 01:38:07.919 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-28 01:38:07.920 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-28 01:38:07.922 +00:00 [DBG] (App.xaml.cs): Resolved service: LoansPage
2025-03-28 01:38:07.922 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-28 01:38:08.327 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-28 01:38:08.366 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:38:08.577 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:38:08.595 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:38:08.596 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:08.596 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:38:08.596 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:08.596 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:08.596 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:38:08.598 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:38:08.633 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-28 01:38:08.665 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-28 01:38:08.674 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-28 01:38:08.675 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 16}'.
2025-03-28 01:38:08.678 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:08.679 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 80ms reading results.
2025-03-28 01:38:08.680 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:08.681 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:38:10.447 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:38:10.482 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()
    .Include(l => l.Book)
    .Include(l => l.Borrower)'
2025-03-28 01:38:10.485 +00:00 [DBG] Including navigation: 'Loan.Book'.
2025-03-28 01:38:10.485 +00:00 [DBG] Including navigation: 'Loan.Borrower'.
2025-03-28 01:38:10.497 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        Book entity;
        LibraryMember entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        entity = 
        {
            MaterializationContext materializationContext2;
            IEntityType entityType2;
            Book instance2;
            InternalEntityEntry entry2;
            bool hasNullKey2;
            materializationContext2 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance2 = default(Book);
            entry2 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(6) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey2);
            !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
            {
                entityType2 = entry2.EntityType;
                return instance2 = (Book)entry2.Entity;
            } : 
            {
                ISnapshot shadowSnapshot2;
                shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType2 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                instance2 = switch (entityType2)
                {
                    case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                        {
                            return 
                            {
                                Book instance;
                                instance = new Book();
                                instance.<Id>k__BackingField = dataReader.GetInt32(6);
                                instance.<Author>k__BackingField = dataReader.GetString(7);
                                instance.<Description>k__BackingField = dataReader.GetString(8);
                                instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(9));
                                instance.<ISBN>k__BackingField = dataReader.GetString(10);
                                instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(11);
                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(12));
                                instance.<Title>k__BackingField = dataReader.GetString(13);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext2.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Book)
                }
                ;
                entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType2, 
                    entity: instance2, 
                    snapshot: shadowSnapshot2);
                return instance2;
            } : default(void);
            return instance2;
        };
        entity = 
        {
            MaterializationContext materializationContext3;
            IEntityType entityType3;
            LibraryMember instance3;
            InternalEntityEntry entry3;
            bool hasNullKey3;
            materializationContext3 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance3 = default(LibraryMember);
            entry3 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(14) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey3);
            !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
            {
                entityType3 = entry3.EntityType;
                return instance3 = (LibraryMember)entry3.Entity;
            } : 
            {
                ISnapshot shadowSnapshot3;
                shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType3 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                instance3 = switch (entityType3)
                {
                    case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                        {
                            return 
                            {
                                LibraryMember instance;
                                instance = new LibraryMember();
                                instance.<Id>k__BackingField = dataReader.GetInt32(14);
                                instance.<Email>k__BackingField = dataReader.GetString(15);
                                instance.<Name>k__BackingField = dataReader.GetString(16);
                                instance.<PhoneNumber>k__BackingField = dataReader.GetString(17);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext3.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(LibraryMember)
                }
                ;
                entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType3, 
                    entity: instance3, 
                    snapshot: shadowSnapshot3);
                return instance3;
            } : default(void);
            return instance3;
        };
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, Book>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
            fixup: (namelessParameter{13}, namelessParameter{14}) => 
            {
                namelessParameter{13}.<Book>k__BackingField = namelessParameter{14};
                return [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{14}, 
                    value: namelessParameter{13}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, LibraryMember>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                namelessParameter{18}.<Borrower>k__BackingField = namelessParameter{19};
                return [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{19}, 
                    value: namelessParameter{18}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:38:10.499 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:38:10.499 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:10.499 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:38:10.499 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:10.499 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:10.499 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:38:10.499 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:38:10.502 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-28 01:38:10.503 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 16}' was detected as changed.
2025-03-28 01:38:10.503 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-28 01:38:10.506 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-28 01:38:10.506 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-28 01:38:10.506 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:10.506 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 7ms reading results.
2025-03-28 01:38:10.506 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:10.506 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:38:13.369 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:38:21.068 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Where(b => b.Title.ToLower().Contains(__ToLower_0))
    .Include(m => m.Loans)'
2025-03-28 01:38:21.070 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:38:21.090 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE instr(lower(b.Title), @__ToLower_0) > 0
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE instr(lower(b.Title), @__ToLower_0) > 0
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:38:21.097 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:38:21.097 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:21.097 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:38:21.097 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:21.098 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:21.099 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE instr(lower("b"."Title"), @__ToLower_0) > 0
ORDER BY "b"."Id"
2025-03-28 01:38:21.101 +00:00 [INF] Executed DbCommand (3ms) [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE instr(lower("b"."Title"), @__ToLower_0) > 0
ORDER BY "b"."Id"
2025-03-28 01:38:21.101 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:21.101 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:38:21.102 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:21.102 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:38:21.593 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Where(b => b.Name.ToLower().Contains(__ToLower_0))
    .Include(m => m.LoanHistory)'
2025-03-28 01:38:21.593 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-28 01:38:21.600 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE instr(lower(m.Name), @__ToLower_0) > 0
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE instr(lower(m.Name), @__ToLower_0) > 0
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:38:21.601 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:38:21.601 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:21.601 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:38:21.601 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:21.601 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:21.601 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE instr(lower("m"."Name"), @__ToLower_0) > 0
ORDER BY "m"."Id"
2025-03-28 01:38:21.601 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE instr(lower("m"."Name"), @__ToLower_0) > 0
ORDER BY "m"."Id"
2025-03-28 01:38:21.602 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:21.602 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 1ms reading results.
2025-03-28 01:38:21.603 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:21.603 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:38:22.056 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:38:22.056 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:22.056 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:38:22.056 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:22.056 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:38:22.056 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:38:22.056 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:38:22.056 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:22.056 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:38:22.056 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:38:22.056 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:39:59.092 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-28 01:39:59.101 +00:00 [INF] Logger configured.
2025-03-28 01:39:59.136 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-28 01:39:59.138 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-28 01:39:59.146 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-28 01:39:59.278 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-28 01:39:59.397 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-28 01:39:59.816 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 01:39:59.900 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-28 01:39:59.906 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:39:59.913 +00:00 [DBG] Created DbConnection. (5ms).
2025-03-28 01:39:59.917 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:39:59.922 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:39:59.924 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-28 01:39:59.927 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:39:59.932 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-28 01:39:59.932 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:39:59.932 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-28 01:39:59.936 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (4ms).
2025-03-28 01:39:59.937 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (7ms).
2025-03-28 01:39:59.938 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:39:59.940 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:39:59.946 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:39:59.972 +00:00 [INF] Executed DbCommand (24ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:39:59.974 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:39:59.976 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-28 01:40:00.232 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-28 01:40:00.233 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-28 01:40:00.233 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-28 01:40:00.233 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-28 01:40:00.233 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-28 01:40:00.233 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-28 01:40:00.233 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-28 01:40:00.233 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-28 01:40:00.233 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-28 01:40:00.240 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-28 01:40:00.243 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-28 01:40:00.244 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-28 01:40:00.246 +00:00 [DBG] (App.xaml.cs): Resolved service: LoansPage
2025-03-28 01:40:00.246 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-28 01:40:00.669 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-28 01:40:00.744 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:40:00.963 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:40:00.987 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:40:00.988 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:00.989 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:40:00.989 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:00.989 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:00.989 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:40:00.991 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:40:01.026 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-28 01:40:01.059 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-28 01:40:01.066 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-28 01:40:01.067 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 16}'.
2025-03-28 01:40:01.070 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:01.071 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 78ms reading results.
2025-03-28 01:40:01.072 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:01.072 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:40:02.668 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:40:02.690 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()
    .Include(l => l.Book)
    .Include(l => l.Borrower)'
2025-03-28 01:40:02.692 +00:00 [DBG] Including navigation: 'Loan.Book'.
2025-03-28 01:40:02.693 +00:00 [DBG] Including navigation: 'Loan.Borrower'.
2025-03-28 01:40:02.702 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        Book entity;
        LibraryMember entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        entity = 
        {
            MaterializationContext materializationContext2;
            IEntityType entityType2;
            Book instance2;
            InternalEntityEntry entry2;
            bool hasNullKey2;
            materializationContext2 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance2 = default(Book);
            entry2 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(6) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey2);
            !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
            {
                entityType2 = entry2.EntityType;
                return instance2 = (Book)entry2.Entity;
            } : 
            {
                ISnapshot shadowSnapshot2;
                shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType2 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                instance2 = switch (entityType2)
                {
                    case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                        {
                            return 
                            {
                                Book instance;
                                instance = new Book();
                                instance.<Id>k__BackingField = dataReader.GetInt32(6);
                                instance.<Author>k__BackingField = dataReader.GetString(7);
                                instance.<Description>k__BackingField = dataReader.GetString(8);
                                instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(9));
                                instance.<ISBN>k__BackingField = dataReader.GetString(10);
                                instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(11);
                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(12));
                                instance.<Title>k__BackingField = dataReader.GetString(13);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext2.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Book)
                }
                ;
                entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType2, 
                    entity: instance2, 
                    snapshot: shadowSnapshot2);
                return instance2;
            } : default(void);
            return instance2;
        };
        entity = 
        {
            MaterializationContext materializationContext3;
            IEntityType entityType3;
            LibraryMember instance3;
            InternalEntityEntry entry3;
            bool hasNullKey3;
            materializationContext3 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance3 = default(LibraryMember);
            entry3 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(14) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey3);
            !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
            {
                entityType3 = entry3.EntityType;
                return instance3 = (LibraryMember)entry3.Entity;
            } : 
            {
                ISnapshot shadowSnapshot3;
                shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType3 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                instance3 = switch (entityType3)
                {
                    case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                        {
                            return 
                            {
                                LibraryMember instance;
                                instance = new LibraryMember();
                                instance.<Id>k__BackingField = dataReader.GetInt32(14);
                                instance.<Email>k__BackingField = dataReader.GetString(15);
                                instance.<Name>k__BackingField = dataReader.GetString(16);
                                instance.<PhoneNumber>k__BackingField = dataReader.GetString(17);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext3.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(LibraryMember)
                }
                ;
                entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType3, 
                    entity: instance3, 
                    snapshot: shadowSnapshot3);
                return instance3;
            } : default(void);
            return instance3;
        };
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, Book>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
            fixup: (namelessParameter{13}, namelessParameter{14}) => 
            {
                namelessParameter{13}.<Book>k__BackingField = namelessParameter{14};
                return [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{14}, 
                    value: namelessParameter{13}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, LibraryMember>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                namelessParameter{18}.<Borrower>k__BackingField = namelessParameter{19};
                return [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{19}, 
                    value: namelessParameter{18}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:40:02.704 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:40:02.704 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:02.704 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:40:02.704 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:02.704 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:02.704 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:40:02.705 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:40:02.707 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-28 01:40:02.708 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 16}' was detected as changed.
2025-03-28 01:40:02.708 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-28 01:40:02.711 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-28 01:40:02.711 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-28 01:40:02.712 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-28 01:40:02.712 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-28 01:40:02.712 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:02.712 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 7ms reading results.
2025-03-28 01:40:02.712 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:02.712 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:40:10.161 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Where(b => b.Title.ToLower().Equals(__ToLower_0))
    .Include(m => m.Loans)'
2025-03-28 01:40:10.162 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:40:10.175 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE lower(b.Title) == @__ToLower_0
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE lower(b.Title) == @__ToLower_0
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:40:10.180 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:40:10.180 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:10.180 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:40:10.180 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:10.181 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:10.182 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE lower("b"."Title") = @__ToLower_0
ORDER BY "b"."Id"
2025-03-28 01:40:10.184 +00:00 [INF] Executed DbCommand (3ms) [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE lower("b"."Title") = @__ToLower_0
ORDER BY "b"."Id"
2025-03-28 01:40:10.184 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:10.184 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:40:10.184 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:10.184 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:40:10.185 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Where(b => b.Name.ToLower().Equals(__ToLower_0))
    .Include(m => m.LoanHistory)'
2025-03-28 01:40:10.186 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-28 01:40:10.192 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE lower(m.Name) == @__ToLower_0
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE lower(m.Name) == @__ToLower_0
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:40:10.194 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:40:10.194 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:10.194 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:40:10.194 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:10.194 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:10.194 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE lower("m"."Name") = @__ToLower_0
ORDER BY "m"."Id"
2025-03-28 01:40:10.194 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE lower("m"."Name") = @__ToLower_0
ORDER BY "m"."Id"
2025-03-28 01:40:10.194 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:10.194 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:40:10.194 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:10.194 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:40:10.196 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:40:10.196 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:10.196 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:40:10.196 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:10.196 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:40:10.196 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:40:10.196 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:40:10.196 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:10.196 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:40:10.196 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:40:10.196 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:42:13.895 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-28 01:42:13.904 +00:00 [INF] Logger configured.
2025-03-28 01:42:13.941 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-28 01:42:13.944 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-28 01:42:13.952 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-28 01:42:14.112 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-28 01:42:14.227 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-28 01:42:14.580 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 01:42:14.684 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-28 01:42:14.693 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:42:14.704 +00:00 [DBG] Created DbConnection. (8ms).
2025-03-28 01:42:14.710 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:42:14.719 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:14.723 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-28 01:42:14.726 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:42:14.732 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-28 01:42:14.733 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:42:14.733 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-28 01:42:14.736 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (4ms).
2025-03-28 01:42:14.737 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (7ms).
2025-03-28 01:42:14.737 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:42:14.738 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:14.743 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:42:14.766 +00:00 [INF] Executed DbCommand (22ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:42:14.767 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:14.769 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-28 01:42:15.061 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-28 01:42:15.061 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-28 01:42:15.061 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-28 01:42:15.061 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-28 01:42:15.061 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-28 01:42:15.061 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-28 01:42:15.061 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-28 01:42:15.061 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-28 01:42:15.061 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-28 01:42:15.067 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-28 01:42:15.069 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-28 01:42:15.070 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-28 01:42:15.072 +00:00 [DBG] (App.xaml.cs): Resolved service: LoansPage
2025-03-28 01:42:15.072 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-28 01:42:15.651 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-28 01:42:15.698 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:42:15.885 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:42:15.910 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:42:15.912 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:15.912 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:42:15.912 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:15.912 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:15.913 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:42:15.915 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:42:15.941 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-28 01:42:15.970 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-28 01:42:15.976 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-28 01:42:15.976 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-28 01:42:15.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 16}'.
2025-03-28 01:42:15.979 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:15.980 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 64ms reading results.
2025-03-28 01:42:15.981 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:15.981 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:42:25.311 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:42:25.336 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()
    .Include(l => l.Book)
    .Include(l => l.Borrower)'
2025-03-28 01:42:25.338 +00:00 [DBG] Including navigation: 'Loan.Book'.
2025-03-28 01:42:25.339 +00:00 [DBG] Including navigation: 'Loan.Borrower'.
2025-03-28 01:42:25.349 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        Book entity;
        LibraryMember entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        entity = 
        {
            MaterializationContext materializationContext2;
            IEntityType entityType2;
            Book instance2;
            InternalEntityEntry entry2;
            bool hasNullKey2;
            materializationContext2 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance2 = default(Book);
            entry2 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(6) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey2);
            !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
            {
                entityType2 = entry2.EntityType;
                return instance2 = (Book)entry2.Entity;
            } : 
            {
                ISnapshot shadowSnapshot2;
                shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType2 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                instance2 = switch (entityType2)
                {
                    case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                        {
                            return 
                            {
                                Book instance;
                                instance = new Book();
                                instance.<Id>k__BackingField = dataReader.GetInt32(6);
                                instance.<Author>k__BackingField = dataReader.GetString(7);
                                instance.<Description>k__BackingField = dataReader.GetString(8);
                                instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(9));
                                instance.<ISBN>k__BackingField = dataReader.GetString(10);
                                instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(11);
                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(12));
                                instance.<Title>k__BackingField = dataReader.GetString(13);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext2.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Book)
                }
                ;
                entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType2, 
                    entity: instance2, 
                    snapshot: shadowSnapshot2);
                return instance2;
            } : default(void);
            return instance2;
        };
        entity = 
        {
            MaterializationContext materializationContext3;
            IEntityType entityType3;
            LibraryMember instance3;
            InternalEntityEntry entry3;
            bool hasNullKey3;
            materializationContext3 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance3 = default(LibraryMember);
            entry3 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(14) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey3);
            !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
            {
                entityType3 = entry3.EntityType;
                return instance3 = (LibraryMember)entry3.Entity;
            } : 
            {
                ISnapshot shadowSnapshot3;
                shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType3 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                instance3 = switch (entityType3)
                {
                    case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                        {
                            return 
                            {
                                LibraryMember instance;
                                instance = new LibraryMember();
                                instance.<Id>k__BackingField = dataReader.GetInt32(14);
                                instance.<Email>k__BackingField = dataReader.GetString(15);
                                instance.<Name>k__BackingField = dataReader.GetString(16);
                                instance.<PhoneNumber>k__BackingField = dataReader.GetString(17);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext3.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(LibraryMember)
                }
                ;
                entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType3, 
                    entity: instance3, 
                    snapshot: shadowSnapshot3);
                return instance3;
            } : default(void);
            return instance3;
        };
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, Book>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
            fixup: (namelessParameter{13}, namelessParameter{14}) => 
            {
                namelessParameter{13}.<Book>k__BackingField = namelessParameter{14};
                return [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{14}, 
                    value: namelessParameter{13}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, LibraryMember>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                namelessParameter{18}.<Borrower>k__BackingField = namelessParameter{19};
                return [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{19}, 
                    value: namelessParameter{18}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:42:25.351 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:42:25.352 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:25.352 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:42:25.352 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:25.352 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:25.352 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:42:25.352 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:42:25.354 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-28 01:42:25.355 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 16}' was detected as changed.
2025-03-28 01:42:25.356 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-28 01:42:25.359 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-28 01:42:25.359 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-28 01:42:25.359 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:25.359 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 7ms reading results.
2025-03-28 01:42:25.359 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:25.359 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:42:31.672 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Where(b => b.Title.ToLower().Equals(__ToLower_0))
    .Include(m => m.Loans)'
2025-03-28 01:42:31.674 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:42:31.683 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE lower(b.Title) == @__ToLower_0
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE lower(b.Title) == @__ToLower_0
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:42:31.689 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:42:31.689 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:31.689 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:42:31.689 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:31.690 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:31.691 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE lower("b"."Title") = @__ToLower_0
ORDER BY "b"."Id"
2025-03-28 01:42:31.692 +00:00 [INF] Executed DbCommand (3ms) [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE lower("b"."Title") = @__ToLower_0
ORDER BY "b"."Id"
2025-03-28 01:42:31.693 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:31.693 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:42:31.693 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:31.693 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:42:31.694 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Where(b => b.Name.ToLower().Equals(__ToLower_0))
    .Include(m => m.LoanHistory)'
2025-03-28 01:42:31.694 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-28 01:42:31.700 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE lower(m.Name) == @__ToLower_0
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE lower(m.Name) == @__ToLower_0
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:42:31.702 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:42:31.702 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:31.702 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:42:31.702 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:31.702 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:31.702 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE lower("m"."Name") = @__ToLower_0
ORDER BY "m"."Id"
2025-03-28 01:42:31.702 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@__ToLower_0='r' (Size = 1)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE lower("m"."Name") = @__ToLower_0
ORDER BY "m"."Id"
2025-03-28 01:42:31.702 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:31.702 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:42:31.702 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:31.702 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:42:31.703 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:42:31.703 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:31.703 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:42:31.703 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:31.703 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:42:31.703 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:42:31.703 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:42:31.704 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:31.704 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:42:31.704 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:42:31.704 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:43:58.230 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-28 01:43:58.240 +00:00 [INF] Logger configured.
2025-03-28 01:43:58.275 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-28 01:43:58.277 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-28 01:43:58.283 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-28 01:43:58.406 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-28 01:43:58.577 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-28 01:43:58.975 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 01:43:59.060 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-28 01:43:59.065 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:43:59.072 +00:00 [DBG] Created DbConnection. (6ms).
2025-03-28 01:43:59.075 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:43:59.080 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:43:59.082 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-28 01:43:59.084 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:43:59.088 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-28 01:43:59.088 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:43:59.088 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-28 01:43:59.091 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (3ms).
2025-03-28 01:43:59.091 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (5ms).
2025-03-28 01:43:59.091 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:43:59.092 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:43:59.096 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:43:59.115 +00:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:43:59.117 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:43:59.119 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-28 01:43:59.359 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-28 01:43:59.359 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-28 01:43:59.359 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-28 01:43:59.359 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-28 01:43:59.359 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-28 01:43:59.359 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-28 01:43:59.359 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-28 01:43:59.359 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-28 01:43:59.359 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-28 01:43:59.364 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-28 01:43:59.368 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-28 01:43:59.370 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-28 01:43:59.373 +00:00 [DBG] (App.xaml.cs): Resolved service: LoansPage
2025-03-28 01:43:59.373 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-28 01:43:59.760 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-28 01:43:59.801 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:44:00.034 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:44:00.055 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:44:00.056 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:00.056 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:44:00.056 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:44:00.056 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:44:00.056 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:44:00.058 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:44:00.081 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-28 01:44:00.106 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-28 01:44:00.114 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-28 01:44:00.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-28 01:44:00.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-28 01:44:00.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 16}'.
2025-03-28 01:44:00.119 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:00.120 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 61ms reading results.
2025-03-28 01:44:00.122 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:00.122 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:44:08.907 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:44:08.944 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()
    .Include(l => l.Book)
    .Include(l => l.Borrower)'
2025-03-28 01:44:08.947 +00:00 [DBG] Including navigation: 'Loan.Book'.
2025-03-28 01:44:08.948 +00:00 [DBG] Including navigation: 'Loan.Borrower'.
2025-03-28 01:44:08.963 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        Book entity;
        LibraryMember entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        entity = 
        {
            MaterializationContext materializationContext2;
            IEntityType entityType2;
            Book instance2;
            InternalEntityEntry entry2;
            bool hasNullKey2;
            materializationContext2 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance2 = default(Book);
            entry2 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(6) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey2);
            !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
            {
                entityType2 = entry2.EntityType;
                return instance2 = (Book)entry2.Entity;
            } : 
            {
                ISnapshot shadowSnapshot2;
                shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType2 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                instance2 = switch (entityType2)
                {
                    case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                        {
                            return 
                            {
                                Book instance;
                                instance = new Book();
                                instance.<Id>k__BackingField = dataReader.GetInt32(6);
                                instance.<Author>k__BackingField = dataReader.GetString(7);
                                instance.<Description>k__BackingField = dataReader.GetString(8);
                                instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(9));
                                instance.<ISBN>k__BackingField = dataReader.GetString(10);
                                instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(11);
                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(12));
                                instance.<Title>k__BackingField = dataReader.GetString(13);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext2.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Book)
                }
                ;
                entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType2, 
                    entity: instance2, 
                    snapshot: shadowSnapshot2);
                return instance2;
            } : default(void);
            return instance2;
        };
        entity = 
        {
            MaterializationContext materializationContext3;
            IEntityType entityType3;
            LibraryMember instance3;
            InternalEntityEntry entry3;
            bool hasNullKey3;
            materializationContext3 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance3 = default(LibraryMember);
            entry3 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(14) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey3);
            !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
            {
                entityType3 = entry3.EntityType;
                return instance3 = (LibraryMember)entry3.Entity;
            } : 
            {
                ISnapshot shadowSnapshot3;
                shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType3 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                instance3 = switch (entityType3)
                {
                    case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                        {
                            return 
                            {
                                LibraryMember instance;
                                instance = new LibraryMember();
                                instance.<Id>k__BackingField = dataReader.GetInt32(14);
                                instance.<Email>k__BackingField = dataReader.GetString(15);
                                instance.<Name>k__BackingField = dataReader.GetString(16);
                                instance.<PhoneNumber>k__BackingField = dataReader.GetString(17);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext3.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(LibraryMember)
                }
                ;
                entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType3, 
                    entity: instance3, 
                    snapshot: shadowSnapshot3);
                return instance3;
            } : default(void);
            return instance3;
        };
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, Book>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
            fixup: (namelessParameter{13}, namelessParameter{14}) => 
            {
                namelessParameter{13}.<Book>k__BackingField = namelessParameter{14};
                return [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{14}, 
                    value: namelessParameter{13}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, LibraryMember>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                namelessParameter{18}.<Borrower>k__BackingField = namelessParameter{19};
                return [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{19}, 
                    value: namelessParameter{18}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:44:08.966 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:44:08.966 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:08.966 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:44:08.966 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:44:08.966 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:44:08.966 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:44:08.966 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:44:08.970 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-28 01:44:08.972 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 16}' was detected as changed.
2025-03-28 01:44:08.973 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-28 01:44:08.976 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-28 01:44:08.976 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-28 01:44:08.976 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-28 01:44:08.976 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-28 01:44:08.976 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-28 01:44:08.976 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-28 01:44:08.977 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-28 01:44:08.977 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-28 01:44:08.977 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:08.977 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 10ms reading results.
2025-03-28 01:44:08.977 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:08.977 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:44:31.425 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _inventoryPage.
2025-03-28 01:44:31.440 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:44:31.440 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:31.440 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:44:31.440 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:44:31.440 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:44:31.440 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:44:31.440 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:44:31.440 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:31.440 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:44:31.440 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:31.440 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:44:36.920 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:44:36.929 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:44:36.929 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:36.929 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:44:36.929 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:44:36.929 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:44:36.929 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:44:36.929 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:44:36.930 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:36.930 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:44:36.930 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:44:36.930 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:45:02.592 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Where(b => b.Title.ToLower().Equals(__ToLower_0))
    .Include(m => m.Loans)'
2025-03-28 01:45:02.598 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:45:02.607 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE lower(b.Title) == @__ToLower_0
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE lower(b.Title) == @__ToLower_0
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:45:02.613 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:45:02.613 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:02.613 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:45:02.613 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:45:02.613 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:45:02.614 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='the shining' (Size = 11)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE lower("b"."Title") = @__ToLower_0
ORDER BY "b"."Id"
2025-03-28 01:45:02.616 +00:00 [INF] Executed DbCommand (3ms) [Parameters=[@__ToLower_0='the shining' (Size = 11)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE lower("b"."Title") = @__ToLower_0
ORDER BY "b"."Id"
2025-03-28 01:45:02.617 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:02.617 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:45:02.617 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:02.617 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:45:03.069 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Where(b => b.Name.ToLower().Equals(__ToLower_0))
    .Include(m => m.LoanHistory)'
2025-03-28 01:45:03.070 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-28 01:45:03.077 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE lower(m.Name) == @__ToLower_0
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE lower(m.Name) == @__ToLower_0
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:45:03.078 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:45:03.078 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:03.078 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:45:03.078 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:45:03.078 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:45:03.078 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='emily stone' (Size = 11)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE lower("m"."Name") = @__ToLower_0
ORDER BY "m"."Id"
2025-03-28 01:45:03.078 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@__ToLower_0='emily stone' (Size = 11)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE lower("m"."Name") = @__ToLower_0
ORDER BY "m"."Id"
2025-03-28 01:45:03.079 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:03.079 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:45:03.079 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:03.079 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:45:03.611 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:45:03.611 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:03.611 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:45:03.611 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:45:03.611 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:45:03.611 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:45:03.611 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:45:03.612 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:03.612 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:45:03.612 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:03.612 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:45:56.657 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-28 01:45:56.669 +00:00 [INF] Logger configured.
2025-03-28 01:45:56.699 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-28 01:45:56.701 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-28 01:45:56.708 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-28 01:45:56.839 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-28 01:45:56.945 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-28 01:45:57.332 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-28 01:45:57.407 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-28 01:45:57.412 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:45:57.418 +00:00 [DBG] Created DbConnection. (4ms).
2025-03-28 01:45:57.422 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:45:57.430 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:57.431 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-28 01:45:57.434 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:45:57.437 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-28 01:45:57.438 +00:00 [DBG] Creating DbConnection.
2025-03-28 01:45:57.438 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-28 01:45:57.441 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (3ms).
2025-03-28 01:45:57.442 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (6ms).
2025-03-28 01:45:57.442 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:45:57.443 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:57.447 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:45:57.463 +00:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-28 01:45:57.464 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:57.466 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-28 01:45:57.720 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-28 01:45:57.720 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-28 01:45:57.720 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-28 01:45:57.720 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-28 01:45:57.720 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-28 01:45:57.720 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-28 01:45:57.720 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-28 01:45:57.720 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-28 01:45:57.720 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-28 01:45:57.728 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-28 01:45:57.730 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-28 01:45:57.732 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-28 01:45:57.733 +00:00 [DBG] (App.xaml.cs): Resolved service: LoansPage
2025-03-28 01:45:57.733 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-28 01:45:58.088 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-28 01:45:58.126 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:45:58.355 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:45:58.372 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:45:58.373 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:58.373 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:45:58.374 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:45:58.374 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:45:58.374 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:45:58.376 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-28 01:45:58.408 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-28 01:45:58.453 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-28 01:45:58.462 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-28 01:45:58.463 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 16}'.
2025-03-28 01:45:58.466 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:58.469 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 91ms reading results.
2025-03-28 01:45:58.470 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:45:58.471 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:46:01.814 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-28 01:46:01.844 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()
    .Include(l => l.Book)
    .Include(l => l.Borrower)'
2025-03-28 01:46:01.848 +00:00 [DBG] Including navigation: 'Loan.Book'.
2025-03-28 01:46:01.849 +00:00 [DBG] Including navigation: 'Loan.Borrower'.
2025-03-28 01:46:01.865 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        Book entity;
        LibraryMember entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        entity = 
        {
            MaterializationContext materializationContext2;
            IEntityType entityType2;
            Book instance2;
            InternalEntityEntry entry2;
            bool hasNullKey2;
            materializationContext2 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance2 = default(Book);
            entry2 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(6) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey2);
            !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
            {
                entityType2 = entry2.EntityType;
                return instance2 = (Book)entry2.Entity;
            } : 
            {
                ISnapshot shadowSnapshot2;
                shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType2 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                instance2 = switch (entityType2)
                {
                    case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                        {
                            return 
                            {
                                Book instance;
                                instance = new Book();
                                instance.<Id>k__BackingField = dataReader.GetInt32(6);
                                instance.<Author>k__BackingField = dataReader.GetString(7);
                                instance.<Description>k__BackingField = dataReader.GetString(8);
                                instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(9));
                                instance.<ISBN>k__BackingField = dataReader.GetString(10);
                                instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(11);
                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(12));
                                instance.<Title>k__BackingField = dataReader.GetString(13);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext2.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Book)
                }
                ;
                entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType2, 
                    entity: instance2, 
                    snapshot: shadowSnapshot2);
                return instance2;
            } : default(void);
            return instance2;
        };
        entity = 
        {
            MaterializationContext materializationContext3;
            IEntityType entityType3;
            LibraryMember instance3;
            InternalEntityEntry entry3;
            bool hasNullKey3;
            materializationContext3 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance3 = default(LibraryMember);
            entry3 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(14) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey3);
            !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
            {
                entityType3 = entry3.EntityType;
                return instance3 = (LibraryMember)entry3.Entity;
            } : 
            {
                ISnapshot shadowSnapshot3;
                shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType3 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                instance3 = switch (entityType3)
                {
                    case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                        {
                            return 
                            {
                                LibraryMember instance;
                                instance = new LibraryMember();
                                instance.<Id>k__BackingField = dataReader.GetInt32(14);
                                instance.<Email>k__BackingField = dataReader.GetString(15);
                                instance.<Name>k__BackingField = dataReader.GetString(16);
                                instance.<PhoneNumber>k__BackingField = dataReader.GetString(17);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext3.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(LibraryMember)
                }
                ;
                entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType3, 
                    entity: instance3, 
                    snapshot: shadowSnapshot3);
                return instance3;
            } : default(void);
            return instance3;
        };
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, Book>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
            fixup: (namelessParameter{13}, namelessParameter{14}) => 
            {
                namelessParameter{13}.<Book>k__BackingField = namelessParameter{14};
                return [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{14}, 
                    value: namelessParameter{13}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, LibraryMember>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                namelessParameter{18}.<Borrower>k__BackingField = namelessParameter{19};
                return [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{19}, 
                    value: namelessParameter{18}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:46:01.867 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:46:01.867 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:01.867 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:46:01.867 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:01.867 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:01.867 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:46:01.868 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:46:01.870 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-28 01:46:01.871 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 16}' was detected as changed.
2025-03-28 01:46:01.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-28 01:46:01.875 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-28 01:46:01.875 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-28 01:46:01.875 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:01.875 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 7ms reading results.
2025-03-28 01:46:01.875 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:01.875 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:46:20.933 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Where(b => b.Title.ToLower().Equals(__ToLower_0))
    .Include(m => m.Loans)'
2025-03-28 01:46:20.935 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-28 01:46:20.952 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE lower(b.Title) == @__ToLower_0
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        WHERE lower(b.Title) == @__ToLower_0
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:46:20.957 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:46:20.957 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:20.957 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:46:20.957 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:20.958 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:20.959 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='the shining' (Size = 11)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE lower("b"."Title") = @__ToLower_0
ORDER BY "b"."Id"
2025-03-28 01:46:20.960 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[@__ToLower_0='the shining' (Size = 11)], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
WHERE lower("b"."Title") = @__ToLower_0
ORDER BY "b"."Id"
2025-03-28 01:46:20.961 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:20.961 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:46:20.961 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:20.961 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:46:20.963 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Where(b => b.Name.ToLower().Equals(__ToLower_0))
    .Include(m => m.LoanHistory)'
2025-03-28 01:46:20.963 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-28 01:46:20.970 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE lower(m.Name) == @__ToLower_0
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        WHERE lower(m.Name) == @__ToLower_0
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-28 01:46:20.971 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:46:20.971 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:20.971 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:46:20.972 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:20.972 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:20.972 +00:00 [DBG] Executing DbCommand [Parameters=[@__ToLower_0='emily stone' (Size = 11)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE lower("m"."Name") = @__ToLower_0
ORDER BY "m"."Id"
2025-03-28 01:46:20.972 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@__ToLower_0='emily stone' (Size = 11)], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
WHERE lower("m"."Name") = @__ToLower_0
ORDER BY "m"."Id"
2025-03-28 01:46:20.972 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:20.973 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:46:20.973 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:20.973 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:46:20.974 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:46:20.974 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:20.974 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:46:20.974 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:20.974 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:20.974 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:46:20.974 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:46:20.974 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:20.974 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:46:20.974 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:20.974 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:46:20.985 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482647' for the property 'Loan.LoanID'.
2025-03-28 01:46:20.994 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482647}'.
2025-03-28 01:46:20.995 +00:00 [DBG] SaveChanges starting for 'LibraryContext'.
2025-03-28 01:46:20.997 +00:00 [DBG] DetectChanges starting for 'LibraryContext'.
2025-03-28 01:46:21.008 +00:00 [DBG] DetectChanges completed for 'LibraryContext'.
2025-03-28 01:46:21.045 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:46:21.045 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:21.046 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:46:21.046 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:21.046 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:21.046 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='19', @p1='2', @p2='2025-04-04T01:46:20.9750777Z' (DbType = DateTime), @p3='2025-03-28T01:46:20.9750513Z' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-28 01:46:21.046 +00:00 [INF] Executed DbCommand (1ms) [Parameters=[@p0='19', @p1='2', @p2='2025-04-04T01:46:20.9750777Z' (DbType = DateTime), @p3='2025-03-28T01:46:20.9750513Z' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-28 01:46:21.053 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482647' to '17' for entity with key '{LoanID: 17}'.
2025-03-28 01:46:21.056 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:21.056 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 9ms reading results.
2025-03-28 01:46:21.056 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:21.057 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:46:21.062 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 17}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-28 01:46:21.063 +00:00 [DBG] SaveChanges completed for 'LibraryContext' with 1 entities written to the database.
2025-03-28 01:46:21.063 +00:00 [DBG] SaveChanges starting for 'LibraryContext'.
2025-03-28 01:46:21.063 +00:00 [DBG] DetectChanges starting for 'LibraryContext'.
2025-03-28 01:46:21.063 +00:00 [DBG] DetectChanges completed for 'LibraryContext'.
2025-03-28 01:46:21.064 +00:00 [DBG] SaveChanges completed for 'LibraryContext' with 0 entities written to the database.
2025-03-28 01:46:21.068 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-28 01:46:21.068 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:21.068 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-28 01:46:21.068 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:21.068 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-28 01:46:21.068 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:46:21.068 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-28 01:46:21.069 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:21.069 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-28 01:46:21.069 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-28 01:46:21.069 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-28 01:47:39.835 +00:00 [INF] (App.xaml.cs): App Exiting
