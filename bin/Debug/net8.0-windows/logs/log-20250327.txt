2025-03-27 00:53:56.263 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 00:53:56.272 +00:00 [INF] Logger configured.
2025-03-27 00:53:56.308 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 00:53:56.311 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 00:53:56.319 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 00:53:56.460 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 00:53:56.606 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 00:53:57.150 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 00:53:57.216 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 00:53:57.230 +00:00 [DBG] Creating DbConnection.
2025-03-27 00:53:57.243 +00:00 [DBG] Created DbConnection. (13ms).
2025-03-27 00:53:57.250 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:53:57.264 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:53:57.269 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 00:53:57.275 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:53:57.280 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 00:53:57.281 +00:00 [DBG] Creating DbConnection.
2025-03-27 00:53:57.281 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 00:53:57.286 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (6ms).
2025-03-27 00:53:57.286 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (9ms).
2025-03-27 00:53:57.286 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:53:57.287 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:53:57.291 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 00:53:57.313 +00:00 [INF] Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 00:53:57.314 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:53:57.315 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-27 00:53:57.633 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 00:53:57.633 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 00:53:57.633 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 00:53:57.633 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 00:53:57.633 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 00:53:57.633 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 00:53:57.633 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 00:53:57.633 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 00:53:57.633 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 00:53:57.641 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 00:53:57.642 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 00:53:57.644 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 00:53:57.644 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 00:53:58.093 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 00:53:58.138 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 00:53:58.368 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 00:53:58.388 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:53:58.389 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:53:58.389 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:53:58.389 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:53:58.389 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:53:58.390 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:53:58.391 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:53:58.421 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 00:53:58.440 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 00:53:58.440 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 00:53:58.440 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 00:53:58.440 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 00:53:58.440 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 00:53:58.441 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 00:53:58.444 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:53:58.445 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 52ms reading results.
2025-03-27 00:53:58.447 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:53:58.447 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:53:59.873 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 00:53:59.902 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 00:53:59.906 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 00:53:59.907 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:53:59.907 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:53:59.907 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:53:59.907 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:53:59.907 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:53:59.907 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 00:53:59.907 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 00:53:59.907 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:53:59.907 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 00:53:59.907 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:53:59.907 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:54:10.612 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:54:10.613 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:54:10.613 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:54:10.613 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:54:10.613 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:54:10.613 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:54:10.613 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:54:10.613 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:54:10.613 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 00:54:10.613 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:54:10.613 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:54:10.615 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Include(m => m.LoanHistory)'
2025-03-27 00:54:10.615 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-27 00:54:10.622 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 00:54:10.624 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:54:10.624 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:54:10.624 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:54:10.624 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:54:10.624 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:54:10.624 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 00:54:10.624 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 00:54:10.626 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 00:54:10.630 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 00:54:10.630 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 00:54:10.643 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 00:54:10.643 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 00:54:10.643 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 00:54:10.643 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 00:54:10.643 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 00:54:10.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 00:54:10.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 00:54:10.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 00:54:10.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 00:54:10.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 00:54:10.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 00:54:10.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 00:54:10.644 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:54:10.644 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 19ms reading results.
2025-03-27 00:54:10.644 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:54:10.644 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:56:07.884 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482647' for the property 'Loan.LoanID'.
2025-03-27 00:56:07.900 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482647}'.
2025-03-27 00:56:07.902 +00:00 [DBG] SaveChanges starting for 'LibraryContext'.
2025-03-27 00:56:07.903 +00:00 [DBG] DetectChanges starting for 'LibraryContext'.
2025-03-27 00:56:07.927 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 1}'.
2025-03-27 00:56:07.929 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 2}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 3}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 4}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 5}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 6}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 7}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 8}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 9}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 10}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 11}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 12}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 13}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 14}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 00:56:07.930 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 15}'.
2025-03-27 00:56:07.930 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 00:56:07.931 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 1}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 2}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 3}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 4}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 5}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 6}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 7}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 8}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 9}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 10}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 11}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 12}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 13}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 14}'.
2025-03-27 00:56:07.932 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 15}'.
2025-03-27 00:56:07.932 +00:00 [DBG] DetectChanges completed for 'LibraryContext'.
2025-03-27 00:56:07.972 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:56:07.972 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:56:07.972 +00:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-03-27 00:56:07.975 +00:00 [DBG] Began transaction with isolation level 'Serializable'.
2025-03-27 00:56:07.976 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:56:07.976 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:56:07.977 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:56:07.979 +00:00 [DBG] Executing DbCommand [Parameters=[@p5='1', @p0='2', @p1='2', @p2='2025-04-03T00:54:13.9667788+01:00' (DbType = DateTime), @p3='2025-03-27T00:54:13.9667757+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
UPDATE "Loans" SET "BookID" = @p0, "BorrowerID" = @p1, "DueDate" = @p2, "LoanDate" = @p3, "ReturnDate" = @p4
WHERE "LoanID" = @p5
RETURNING 1;
2025-03-27 00:56:07.982 +00:00 [INF] Executed DbCommand (5ms) [Parameters=[@p5='1', @p0='2', @p1='2', @p2='2025-04-03T00:54:13.9667788+01:00' (DbType = DateTime), @p3='2025-03-27T00:54:13.9667757+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
UPDATE "Loans" SET "BookID" = @p0, "BorrowerID" = @p1, "DueDate" = @p2, "LoanDate" = @p3, "ReturnDate" = @p4
WHERE "LoanID" = @p5
RETURNING 1;
2025-03-27 00:56:07.986 +00:00 [DBG] Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException: The database operation was expected to affect 1 row(s), but actually affected 0 row(s); data may have been modified or deleted since entities were loaded. See https://go.microsoft.com/fwlink/?LinkId=527962 for information on understanding and handling optimistic concurrency exceptions.
2025-03-27 00:56:07.988 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:56:07.988 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 6ms reading results.
2025-03-27 00:56:07.990 +00:00 [DBG] Disposing transaction.
2025-03-27 00:56:07.992 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:56:07.992 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:56:08.021 +00:00 [ERR] (App.xaml.cs): UI thread exception
Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException: The database operation was expected to affect 1 row(s), but actually affected 0 row(s); data may have been modified or deleted since entities were loaded. See https://go.microsoft.com/fwlink/?LinkId=527962 for information on understanding and handling optimistic concurrency exceptions.
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ThrowAggregateUpdateConcurrencyExceptionAsync(RelationalDataReader reader, Int32 commandIndex, Int32 expectedRowsAffected, Int32 rowsAffected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetWithRowsAffectedOnlyAsync(Int32 commandIndex, RelationalDataReader reader, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(IList`1 entries, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at CRUDLibrary.Services.LibraryService.AddLoanAsync(Loan loan) in C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\Services\LibraryService.cs:line 62
   at CRUDLibrary.ViewModels.Loans.LoansPageViewModel.AddAsync() in C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\ViewModels\Loans\LoansPageViewModel.cs:line 91
   at CommunityToolkit.Mvvm.Input.AsyncRelayCommand.AwaitAndThrowIfFailed(Task executionTask)
   at System.Threading.Tasks.Task.<>c.<ThrowAsync>b__128_0(Object state)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
2025-03-27 00:57:39.472 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:57:39.476 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:39.476 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:57:39.476 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:57:39.476 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:57:39.476 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:57:39.476 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:57:39.479 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:39.479 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 3ms reading results.
2025-03-27 00:57:39.479 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:39.479 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:57:39.480 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:57:39.480 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:39.480 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:57:39.480 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:57:39.480 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:57:39.480 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 00:57:39.480 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 00:57:39.480 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:39.480 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 00:57:39.480 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:39.480 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:57:52.753 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 00:57:52.762 +00:00 [INF] Logger configured.
2025-03-27 00:57:52.789 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 00:57:52.791 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 00:57:52.796 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 00:57:52.895 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 00:57:52.992 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 00:57:53.266 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 00:57:53.340 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 00:57:53.346 +00:00 [DBG] Creating DbConnection.
2025-03-27 00:57:53.352 +00:00 [DBG] Created DbConnection. (5ms).
2025-03-27 00:57:53.355 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:57:53.360 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:53.362 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 00:57:53.365 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:57:53.369 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 00:57:53.369 +00:00 [DBG] Creating DbConnection.
2025-03-27 00:57:53.369 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 00:57:53.372 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (3ms).
2025-03-27 00:57:53.372 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (5ms).
2025-03-27 00:57:53.372 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:57:53.373 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:53.377 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 00:57:53.395 +00:00 [INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 00:57:53.396 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:53.398 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-27 00:57:53.634 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 00:57:53.634 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 00:57:53.634 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 00:57:53.634 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 00:57:53.634 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 00:57:53.635 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 00:57:53.635 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 00:57:53.635 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 00:57:53.635 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 00:57:53.643 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 00:57:53.645 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 00:57:53.649 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 00:57:53.649 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 00:57:54.001 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 00:57:54.046 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 00:57:54.258 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 00:57:54.276 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:57:54.277 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:54.277 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:57:54.277 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:57:54.277 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:57:54.278 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:57:54.279 +00:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:57:54.307 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 00:57:54.330 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 00:57:54.330 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 00:57:54.330 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 00:57:54.330 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 00:57:54.330 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 00:57:54.330 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 00:57:54.331 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 00:57:54.334 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:54.335 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 54ms reading results.
2025-03-27 00:57:54.336 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:54.337 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:57:57.202 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 00:57:57.225 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 00:57:57.228 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 00:57:57.228 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:57:57.229 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:57.229 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:57:57.229 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:57:57.229 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:57:57.229 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 00:57:57.229 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 00:57:57.229 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:57.229 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 00:57:57.229 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:57:57.229 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:58:10.643 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:58:10.644 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:58:10.644 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:58:10.644 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:58:10.644 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:58:10.644 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:58:10.644 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 00:58:10.645 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:58:10.645 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 00:58:10.645 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:58:10.645 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 00:58:10.646 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Include(m => m.LoanHistory)'
2025-03-27 00:58:10.646 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-27 00:58:10.673 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 00:58:10.675 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 00:58:10.675 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:58:10.675 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 00:58:10.675 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:58:10.675 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 00:58:10.675 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 00:58:10.675 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 00:58:10.677 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 00:58:10.681 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:58:10.681 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 6ms reading results.
2025-03-27 00:58:10.681 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 00:58:10.682 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:29:38.925 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:29:38.935 +00:00 [INF] Logger configured.
2025-03-27 01:29:38.970 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:29:38.972 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:29:38.983 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:29:39.131 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:29:39.257 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:29:39.780 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:29:39.870 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:29:39.878 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:29:39.888 +00:00 [DBG] Created DbConnection. (8ms).
2025-03-27 01:29:39.891 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:29:39.897 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:39.898 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:29:39.901 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:29:39.904 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:29:39.905 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:29:39.905 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:29:39.910 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (3ms).
2025-03-27 01:29:39.911 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (8ms).
2025-03-27 01:29:39.911 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:29:39.912 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:39.915 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:29:39.934 +00:00 [INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:29:39.936 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:39.938 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-27 01:29:40.181 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:29:40.181 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:29:40.181 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:29:40.181 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:29:40.181 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:29:40.182 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:29:40.182 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:29:40.182 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:29:40.182 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:29:40.197 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:29:40.201 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:29:40.204 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:29:40.204 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:29:40.589 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:29:40.648 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:29:40.891 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:29:40.908 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:29:40.909 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:40.909 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:29:40.909 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:40.909 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:40.910 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:29:40.912 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:29:40.951 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:29:40.981 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:29:40.982 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:29:40.982 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:29:40.984 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:40.986 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 73ms reading results.
2025-03-27 01:29:40.987 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:40.987 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:29:42.984 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:29:43.024 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:29:43.028 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:29:43.030 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:29:43.030 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:43.030 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:29:43.030 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:43.030 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:43.030 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:29:43.030 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:29:43.030 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:43.030 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:29:43.030 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:43.030 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:29:50.065 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:29:50.066 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:50.066 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:29:50.066 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:50.066 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:50.066 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:29:50.066 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:29:50.067 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:50.067 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:29:50.067 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:50.067 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:29:50.068 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Include(m => m.LoanHistory)'
2025-03-27 01:29:50.068 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-27 01:29:50.076 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:29:50.078 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:29:50.078 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:50.078 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:29:50.078 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:50.078 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:50.078 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:29:50.078 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:29:50.081 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 01:29:50.100 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:50.100 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 21ms reading results.
2025-03-27 01:29:50.100 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:50.100 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:29:54.749 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482647' for the property 'Loan.LoanID'.
2025-03-27 01:29:54.762 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482647}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 01:29:54.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 01:29:54.764 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 01:29:54.765 +00:00 [DBG] SaveChanges starting for 'LibraryContext'.
2025-03-27 01:29:54.766 +00:00 [DBG] DetectChanges starting for 'LibraryContext'.
2025-03-27 01:29:54.779 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 1}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 2}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 3}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 4}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 5}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 6}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 7}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 8}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 9}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 10}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 11}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 12}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 13}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 14}'.
2025-03-27 01:29:54.780 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 15}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 1}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 2}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 3}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 4}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 5}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 6}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 7}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 8}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 9}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 10}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 11}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 12}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 13}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 14}'.
2025-03-27 01:29:54.781 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 15}'.
2025-03-27 01:29:54.782 +00:00 [DBG] DetectChanges completed for 'LibraryContext'.
2025-03-27 01:29:54.816 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:29:54.816 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:54.817 +00:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-03-27 01:29:54.820 +00:00 [DBG] Began transaction with isolation level 'Serializable'.
2025-03-27 01:29:54.821 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:29:54.821 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:54.822 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:29:54.823 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='1', @p1='1', @p2='2025-04-03T01:29:54.7370814+01:00' (DbType = DateTime), @p3='2025-03-27T01:29:54.7370096+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:29:54.827 +00:00 [INF] Executed DbCommand (5ms) [Parameters=[@p0='1', @p1='1', @p2='2025-04-03T01:29:54.7370814+01:00' (DbType = DateTime), @p3='2025-03-27T01:29:54.7370096+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:29:54.833 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482647' to '1' for entity with key '{LoanID: 1}'.
2025-03-27 01:29:54.839 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:54.839 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 12ms reading results.
2025-03-27 01:29:54.841 +00:00 [DBG] Disposing transaction.
2025-03-27 01:29:54.842 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:29:54.842 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:29:54.865 +00:00 [ERR] An exception occurred in the database while saving changes for context type 'CRUDLibrary.Models.DBModels.LibraryContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> System.InvalidOperationException: The instance of entity type 'Loan' cannot be tracked because another instance with the key value '{LoanID: 1}' is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached.
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.ThrowIdentityConflict(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry, Boolean updateDuplicate)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap(InternalEntityEntry entry, IKey key)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1 containingPrincipalKeys, IEnumerable`1 containingForeignKeys, Object oldValue, Object newValue)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1 keys, IEnumerable`1 foreignKeys, Object oldValue, Object newValue)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectKeyChange(InternalEntityEntry entry, IProperty property)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.PropertyChanged(InternalEntityEntry entry, IPropertyBase propertyBase, Boolean setModified)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.PropertyChanged(InternalEntityEntry entry, IPropertyBase property, Boolean setModified)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(IPropertyBase propertyBase, Object value, Boolean isMaterialization, Boolean setModified, Boolean isCascadeDelete, CurrentValueType valueType)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetStoreGeneratedValue(IProperty property, Object value, Boolean setModified)
   at Microsoft.EntityFrameworkCore.Update.ColumnModification.SetStoreGeneratedValue(IUpdateEntry entry, IProperty property, Object value)
   at Microsoft.EntityFrameworkCore.Update.ColumnModification.set_Value(Object value)
   at Microsoft.EntityFrameworkCore.Update.ModificationCommand.PropagateResults(RelationalDataReader relationalReader)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(IList`1 entries, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> System.InvalidOperationException: The instance of entity type 'Loan' cannot be tracked because another instance with the key value '{LoanID: 1}' is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached.
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.ThrowIdentityConflict(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry, Boolean updateDuplicate)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap(InternalEntityEntry entry, IKey key)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1 containingPrincipalKeys, IEnumerable`1 containingForeignKeys, Object oldValue, Object newValue)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1 keys, IEnumerable`1 foreignKeys, Object oldValue, Object newValue)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectKeyChange(InternalEntityEntry entry, IProperty property)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.PropertyChanged(InternalEntityEntry entry, IPropertyBase propertyBase, Boolean setModified)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.PropertyChanged(InternalEntityEntry entry, IPropertyBase property, Boolean setModified)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(IPropertyBase propertyBase, Object value, Boolean isMaterialization, Boolean setModified, Boolean isCascadeDelete, CurrentValueType valueType)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetStoreGeneratedValue(IProperty property, Object value, Boolean setModified)
   at Microsoft.EntityFrameworkCore.Update.ColumnModification.SetStoreGeneratedValue(IUpdateEntry entry, IProperty property, Object value)
   at Microsoft.EntityFrameworkCore.Update.ColumnModification.set_Value(Object value)
   at Microsoft.EntityFrameworkCore.Update.ModificationCommand.PropagateResults(RelationalDataReader relationalReader)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(IList`1 entries, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
2025-03-27 01:29:54.891 +00:00 [ERR] (App.xaml.cs): UI thread exception
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> System.InvalidOperationException: The instance of entity type 'Loan' cannot be tracked because another instance with the key value '{LoanID: 1}' is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached.
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.ThrowIdentityConflict(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry, Boolean updateDuplicate)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap(InternalEntityEntry entry, IKey key)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1 containingPrincipalKeys, IEnumerable`1 containingForeignKeys, Object oldValue, Object newValue)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1 keys, IEnumerable`1 foreignKeys, Object oldValue, Object newValue)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectKeyChange(InternalEntityEntry entry, IProperty property)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.PropertyChanged(InternalEntityEntry entry, IPropertyBase propertyBase, Boolean setModified)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier.PropertyChanged(InternalEntityEntry entry, IPropertyBase property, Boolean setModified)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(IPropertyBase propertyBase, Object value, Boolean isMaterialization, Boolean setModified, Boolean isCascadeDelete, CurrentValueType valueType)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetStoreGeneratedValue(IProperty property, Object value, Boolean setModified)
   at Microsoft.EntityFrameworkCore.Update.ColumnModification.SetStoreGeneratedValue(IUpdateEntry entry, IProperty property, Object value)
   at Microsoft.EntityFrameworkCore.Update.ColumnModification.set_Value(Object value)
   at Microsoft.EntityFrameworkCore.Update.ModificationCommand.PropagateResults(RelationalDataReader relationalReader)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(IList`1 entries, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at CRUDLibrary.Services.LibraryService.AddLoansAsync(List`1 loans) in C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\Services\LibraryService.cs:line 259
   at CRUDLibrary.ViewModels.Loans.LoansPageViewModel.AddAsync() in C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\ViewModels\Loans\LoansPageViewModel.cs:line 89
   at CommunityToolkit.Mvvm.Input.AsyncRelayCommand.AwaitAndThrowIfFailed(Task executionTask)
   at System.Threading.Tasks.Task.<>c.<ThrowAsync>b__128_0(Object state)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
2025-03-27 01:30:02.684 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:30:02.693 +00:00 [INF] Logger configured.
2025-03-27 01:30:02.720 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:30:02.722 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:30:02.727 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:30:02.826 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:30:02.940 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:30:03.268 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:30:03.333 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:30:03.338 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:30:03.345 +00:00 [DBG] Created DbConnection. (5ms).
2025-03-27 01:30:03.348 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:30:03.353 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:03.355 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:30:03.358 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:30:03.362 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:30:03.363 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:30:03.363 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:30:03.366 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (3ms).
2025-03-27 01:30:03.367 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (6ms).
2025-03-27 01:30:03.367 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:30:03.368 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:03.371 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:30:03.390 +00:00 [INF] Executed DbCommand (18ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:30:03.391 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:03.393 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-27 01:30:03.588 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:30:03.588 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:30:03.588 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:30:03.588 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:30:03.589 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:30:03.589 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:30:03.589 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:30:03.589 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:30:03.589 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:30:03.598 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:30:03.600 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:30:03.603 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:30:03.603 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:30:03.949 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:30:04.001 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:30:04.222 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:30:04.239 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:30:04.241 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:04.241 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:30:04.241 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:30:04.241 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:30:04.241 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:30:04.243 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:30:04.266 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:30:04.283 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:30:04.285 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:04.286 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 41ms reading results.
2025-03-27 01:30:04.286 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:04.287 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:30:06.503 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:30:06.533 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:30:06.536 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:30:06.537 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:30:06.537 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:06.537 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:30:06.537 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:30:06.537 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:30:06.537 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:30:06.537 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:30:06.537 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:06.537 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:30:06.537 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:06.537 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:30:23.411 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:30:23.411 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:23.411 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:30:23.411 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:30:23.411 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:30:23.411 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:30:23.411 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:30:23.416 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:23.416 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 5ms reading results.
2025-03-27 01:30:23.416 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:23.416 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:30:23.418 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Include(m => m.LoanHistory)'
2025-03-27 01:30:23.418 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-27 01:30:23.426 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:30:23.428 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:30:23.428 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:23.428 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:30:23.428 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:30:23.428 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:30:23.428 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:30:23.428 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:30:23.430 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 01:30:23.434 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:23.434 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 6ms reading results.
2025-03-27 01:30:23.434 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:30:23.434 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:32:36.631 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482647' for the property 'Loan.LoanID'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482647}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 01:32:36.644 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 01:32:36.645 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 01:32:36.645 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 01:32:36.645 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 01:36:46.843 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:36:46.853 +00:00 [INF] Logger configured.
2025-03-27 01:36:46.884 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:36:46.886 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:36:46.892 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:36:47.005 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:36:47.149 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:36:47.529 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:36:47.622 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:36:47.630 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:36:47.642 +00:00 [DBG] Created DbConnection. (9ms).
2025-03-27 01:36:47.649 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:36:47.660 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:47.663 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:36:47.666 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:36:47.671 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:36:47.672 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:36:47.672 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:36:47.676 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (5ms).
2025-03-27 01:36:47.677 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (8ms).
2025-03-27 01:36:47.677 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:36:47.679 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:47.688 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:36:47.730 +00:00 [INF] Executed DbCommand (41ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:36:47.732 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:47.735 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-27 01:36:48.025 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:36:48.025 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:36:48.025 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:36:48.025 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:36:48.025 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:36:48.025 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:36:48.025 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:36:48.025 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:36:48.025 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:36:48.039 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:36:48.043 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:36:48.047 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:36:48.047 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:36:48.490 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:36:48.543 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:36:48.795 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:36:48.816 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:36:48.817 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:48.818 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:36:48.818 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:36:48.818 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:36:48.818 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:36:48.820 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:36:48.847 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:36:48.871 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:36:48.872 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:36:48.872 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:36:48.872 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:36:48.872 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:36:48.872 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:36:48.872 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:36:48.872 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:36:48.872 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:36:48.875 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:48.877 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 55ms reading results.
2025-03-27 01:36:48.878 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:48.879 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:36:49.938 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:36:49.964 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:36:49.967 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:36:49.968 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:36:49.968 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:49.968 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:36:49.968 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:36:49.968 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:36:49.968 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:36:49.968 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:36:49.968 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:49.968 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:36:49.968 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:49.968 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:36:58.279 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:36:58.279 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:58.279 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:36:58.279 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:36:58.279 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:36:58.279 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:36:58.279 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:36:58.280 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:58.280 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:36:58.280 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:58.280 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:36:58.281 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Include(m => m.LoanHistory)'
2025-03-27 01:36:58.281 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-27 01:36:58.290 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:36:58.291 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:36:58.292 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:58.292 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:36:58.292 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:36:58.292 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:36:58.292 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:36:58.292 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:36:58.294 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 01:36:58.313 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 01:36:58.314 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:58.314 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 21ms reading results.
2025-03-27 01:36:58.314 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:36:58.314 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:37:04.034 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482647' for the property 'Loan.LoanID'.
2025-03-27 01:37:04.046 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482647}'.
2025-03-27 01:37:12.800 +00:00 [ERR] (App.xaml.cs): UI thread exception
System.InvalidOperationException: The instance of entity type 'Book' cannot be tracked because another instance with the key value '{Id: 1}' is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached.
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.ThrowIdentityConflict(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry, Boolean updateDuplicate)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges, Boolean modifyProperties)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean modifyProperties, Nullable`1 forceStateWhenUnknownKey, Nullable`1 fallbackState)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode`1 node)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph[TState](EntityEntryGraphNode`1 node, Func`2 handleNode)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph[TState](EntityEntryGraphNode`1 node, Func`2 handleNode)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, Boolean forceStateWhenUnknownKey)
   at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.SetEntityState(InternalEntityEntry entry, EntityState entityState)
   at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.SetEntityStates(IEnumerable`1 entities, EntityState entityState)
   at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1.AddRange(IEnumerable`1 entities)
   at CRUDLibrary.Services.LibraryService.AddLoansAsync(List`1 loans) in C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\Services\LibraryService.cs:line 258
   at CRUDLibrary.ViewModels.Loans.LoansPageViewModel.AddAsync() in C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\ViewModels\Loans\LoansPageViewModel.cs:line 89
   at CommunityToolkit.Mvvm.Input.AsyncRelayCommand.AwaitAndThrowIfFailed(Task executionTask)
   at System.Threading.Tasks.Task.<>c.<ThrowAsync>b__128_0(Object state)
   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
2025-03-27 01:37:15.264 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:37:15.264 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:15.264 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:37:15.264 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:37:15.264 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:37:15.264 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:37:15.265 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:37:15.265 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:15.265 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:37:15.265 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:15.265 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:37:15.265 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:37:15.265 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:15.265 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:37:15.265 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:37:15.265 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:37:15.265 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:37:15.265 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:37:15.265 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:15.265 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:37:15.265 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:15.265 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:37:28.039 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:37:28.049 +00:00 [INF] Logger configured.
2025-03-27 01:37:28.084 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:37:28.086 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:37:28.092 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:37:28.194 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:37:28.297 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:37:28.600 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:37:28.667 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:37:28.673 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:37:28.681 +00:00 [DBG] Created DbConnection. (6ms).
2025-03-27 01:37:28.684 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:37:28.689 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:28.692 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:37:28.694 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:37:28.698 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:37:28.698 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:37:28.699 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:37:28.702 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (3ms).
2025-03-27 01:37:28.703 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (6ms).
2025-03-27 01:37:28.703 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:37:28.704 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:28.707 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:37:28.730 +00:00 [INF] Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:37:28.731 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:28.733 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-27 01:37:28.971 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:37:28.971 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:37:28.971 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:37:28.971 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:37:28.971 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:37:28.971 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:37:28.971 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:37:28.971 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:37:28.971 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:37:28.976 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:37:28.978 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:37:28.979 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:37:28.979 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:37:29.302 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:37:29.350 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:37:29.570 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:37:29.585 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:37:29.586 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:29.586 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:37:29.586 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:37:29.586 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:37:29.586 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:37:29.587 +00:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:37:29.608 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:37:29.632 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:37:29.634 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:29.635 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 47ms reading results.
2025-03-27 01:37:29.636 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:29.637 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:37:30.414 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:37:30.442 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:37:30.445 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:37:30.446 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:37:30.446 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:30.446 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:37:30.446 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:37:30.446 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:37:30.446 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:37:30.447 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:37:30.447 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:30.447 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:37:30.447 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:37:30.447 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:43:24.199 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:43:24.208 +00:00 [INF] Logger configured.
2025-03-27 01:43:24.241 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:43:24.243 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:43:24.250 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:43:24.366 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:43:24.488 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:43:24.943 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:43:25.057 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:43:25.065 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:43:25.073 +00:00 [DBG] Created DbConnection. (7ms).
2025-03-27 01:43:25.077 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:43:25.082 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:25.084 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:43:25.086 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:43:25.090 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:43:25.090 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:43:25.090 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:43:25.095 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (4ms).
2025-03-27 01:43:25.096 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (8ms).
2025-03-27 01:43:25.096 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:43:25.097 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:25.101 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:43:25.135 +00:00 [INF] Executed DbCommand (31ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:43:25.136 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:25.138 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-27 01:43:25.398 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:43:25.398 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:43:25.398 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:43:25.398 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:43:25.398 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:43:25.399 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:43:25.399 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:43:25.399 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:43:25.399 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:43:25.407 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:43:25.410 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:43:25.411 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:43:25.412 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:43:25.829 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:43:25.872 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:43:26.097 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:43:26.115 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:43:26.116 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:26.116 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:43:26.116 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:26.116 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:26.116 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:43:26.118 +00:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:43:26.160 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:43:26.182 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:43:26.184 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:26.185 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 66ms reading results.
2025-03-27 01:43:26.185 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:26.186 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:43:38.605 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:43:38.625 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:43:38.628 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:43:38.629 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:43:38.629 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:38.629 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:43:38.629 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:38.629 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:38.629 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:43:38.629 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:43:38.629 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:38.629 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:43:38.629 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:38.629 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:43:45.754 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:43:45.754 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:45.754 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:43:45.754 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:45.754 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:45.754 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:43:45.754 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:43:45.755 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:45.755 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:43:45.755 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:45.755 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:43:45.756 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Include(m => m.LoanHistory)'
2025-03-27 01:43:45.756 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-27 01:43:45.764 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:43:45.766 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:43:45.766 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:45.766 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:43:45.766 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:45.766 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:45.766 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:43:45.766 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:43:45.769 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 01:43:45.773 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 01:43:45.773 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 01:43:45.773 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 01:43:45.773 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 01:43:45.773 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 01:43:45.773 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 01:43:45.774 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 01:43:45.774 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 01:43:45.774 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 01:43:45.774 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 01:43:45.774 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 01:43:45.774 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 01:43:45.774 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 01:43:45.774 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 01:43:45.774 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:45.774 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 7ms reading results.
2025-03-27 01:43:45.774 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:45.774 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:43:53.555 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482647' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.569 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482647}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482646' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482646}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482645' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482645}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482644' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482644}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482643' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482643}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482642' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482642}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482641' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482641}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482640' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482640}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482639' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482639}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482638' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482638}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482637' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482637}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482636' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482636}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482635' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482635}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482634' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482634}'.
2025-03-27 01:43:53.570 +00:00 [DBG] 'LibraryContext' generated temporary value '-2147482633' for the property 'Loan.LoanID'.
2025-03-27 01:43:53.570 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: -2147482633}'.
2025-03-27 01:43:55.594 +00:00 [DBG] DetectChanges starting for 'LibraryContext'.
2025-03-27 01:43:55.607 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 1}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 2}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 3}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 4}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 5}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 6}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 7}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 8}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 9}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 10}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 11}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 12}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 13}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 14}'.
2025-03-27 01:43:55.609 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'Book.Loans' on entity with key '{Id: 15}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 1}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 2}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 3}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 4}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 5}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 6}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 7}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 8}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 9}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 10}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 11}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 12}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 13}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 14}'.
2025-03-27 01:43:55.610 +00:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LibraryMember.LoanHistory' on entity with key '{Id: 15}'.
2025-03-27 01:43:55.610 +00:00 [DBG] DetectChanges completed for 'LibraryContext'.
2025-03-27 01:43:57.362 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:43:57.364 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:43:57.366 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:43:57.366 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:57.366 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:43:57.366 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:57.366 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:43:57.367 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:43:57.367 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:43:57.367 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:57.367 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:43:57.367 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:43:57.367 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:44:00.319 +00:00 [DBG] SaveChanges starting for 'LibraryContext'.
2025-03-27 01:44:00.319 +00:00 [DBG] DetectChanges starting for 'LibraryContext'.
2025-03-27 01:44:00.320 +00:00 [DBG] DetectChanges completed for 'LibraryContext'.
2025-03-27 01:44:00.353 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:44:00.353 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.354 +00:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-03-27 01:44:00.357 +00:00 [DBG] Began transaction with isolation level 'Serializable'.
2025-03-27 01:44:00.358 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.358 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.359 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.360 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='1', @p1='1', @p2='2025-04-03T01:43:48.2637710+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2636605+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.364 +00:00 [INF] Executed DbCommand (5ms) [Parameters=[@p0='1', @p1='1', @p2='2025-04-03T01:43:48.2637710+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2636605+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.369 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482647' to '1' for entity with key '{LoanID: 1}'.
2025-03-27 01:44:00.370 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.370 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 6ms reading results.
2025-03-27 01:44:00.370 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.371 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.371 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.371 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='2', @p1='2', @p2='2025-04-03T01:43:48.2639803+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639786+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.371 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='2', @p1='2', @p2='2025-04-03T01:43:48.2639803+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639786+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.371 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482646' to '2' for entity with key '{LoanID: 2}'.
2025-03-27 01:44:00.371 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.371 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.371 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.371 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.371 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.371 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='3', @p1='3', @p2='2025-04-03T01:43:48.2639813+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639812+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.371 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='3', @p1='3', @p2='2025-04-03T01:43:48.2639813+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639812+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.371 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482645' to '3' for entity with key '{LoanID: 3}'.
2025-03-27 01:44:00.371 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.371 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.371 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.371 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.371 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.371 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='4', @p1='4', @p2='2025-04-03T01:43:48.2639817+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639816+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.371 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='4', @p1='4', @p2='2025-04-03T01:43:48.2639817+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639816+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.371 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482644' to '4' for entity with key '{LoanID: 4}'.
2025-03-27 01:44:00.371 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.371 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.371 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.371 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.371 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.371 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='5', @p1='5', @p2='2025-04-03T01:43:48.2639821+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639820+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.371 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='5', @p1='5', @p2='2025-04-03T01:43:48.2639821+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639820+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.371 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482643' to '5' for entity with key '{LoanID: 5}'.
2025-03-27 01:44:00.371 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.371 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.371 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.372 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='6', @p1='6', @p2='2025-04-03T01:43:48.2639830+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639829+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='6', @p1='6', @p2='2025-04-03T01:43:48.2639830+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639829+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482642' to '6' for entity with key '{LoanID: 6}'.
2025-03-27 01:44:00.372 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.372 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.372 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.372 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='7', @p1='7', @p2='2025-04-03T01:43:48.2639834+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639833+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='7', @p1='7', @p2='2025-04-03T01:43:48.2639834+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639833+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482641' to '7' for entity with key '{LoanID: 7}'.
2025-03-27 01:44:00.372 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.372 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.372 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.372 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='8', @p1='8', @p2='2025-04-03T01:43:48.2639837+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639836+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='8', @p1='8', @p2='2025-04-03T01:43:48.2639837+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639836+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482640' to '8' for entity with key '{LoanID: 8}'.
2025-03-27 01:44:00.372 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.372 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.372 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.372 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='9', @p1='9', @p2='2025-04-03T01:43:48.2639841+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639840+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='9', @p1='9', @p2='2025-04-03T01:43:48.2639841+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639840+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482639' to '9' for entity with key '{LoanID: 9}'.
2025-03-27 01:44:00.372 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.372 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.372 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.372 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='10', @p1='10', @p2='2025-04-03T01:43:48.2639846+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639845+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='10', @p1='10', @p2='2025-04-03T01:43:48.2639846+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639845+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482638' to '10' for entity with key '{LoanID: 10}'.
2025-03-27 01:44:00.372 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.372 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.372 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.372 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='11', @p1='11', @p2='2025-04-03T01:43:48.2639850+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639849+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='11', @p1='11', @p2='2025-04-03T01:43:48.2639850+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639849+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482637' to '11' for entity with key '{LoanID: 11}'.
2025-03-27 01:44:00.372 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.372 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.372 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.372 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.372 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='12', @p1='12', @p2='2025-04-03T01:43:48.2639853+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639852+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.372 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='12', @p1='12', @p2='2025-04-03T01:43:48.2639853+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639852+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.373 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482636' to '12' for entity with key '{LoanID: 12}'.
2025-03-27 01:44:00.373 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.373 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.373 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.373 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.373 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.373 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='13', @p1='13', @p2='2025-04-03T01:43:48.2639857+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639856+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.373 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='13', @p1='13', @p2='2025-04-03T01:43:48.2639857+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639856+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.373 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482635' to '13' for entity with key '{LoanID: 13}'.
2025-03-27 01:44:00.373 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.373 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.373 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.373 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.373 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.373 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='14', @p1='14', @p2='2025-04-03T01:43:48.2639860+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639859+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.373 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='14', @p1='14', @p2='2025-04-03T01:43:48.2639860+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639859+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.373 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482634' to '14' for entity with key '{LoanID: 14}'.
2025-03-27 01:44:00.373 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.373 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.373 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.373 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.373 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.373 +00:00 [DBG] Executing DbCommand [Parameters=[@p0='15', @p1='15', @p2='2025-04-03T01:43:48.2639863+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639862+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.373 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='15', @p1='15', @p2='2025-04-03T01:43:48.2639863+01:00' (DbType = DateTime), @p3='2025-03-27T01:43:48.2639862+00:00' (DbType = DateTime), @p4=NULL (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Loans" ("BookID", "BorrowerID", "DueDate", "LoanDate", "ReturnDate")
VALUES (@p0, @p1, @p2, @p3, @p4)
RETURNING "LoanID";
2025-03-27 01:44:00.373 +00:00 [DBG] The foreign key property 'Loan.LoanID' was detected as changed from '-2147482633' to '15' for entity with key '{LoanID: 15}'.
2025-03-27 01:44:00.373 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.373 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.375 +00:00 [DBG] Committing transaction.
2025-03-27 01:44:00.377 +00:00 [DBG] Committed transaction.
2025-03-27 01:44:00.378 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.378 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:44:00.379 +00:00 [DBG] Disposing transaction.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 1}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 2}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 3}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 4}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 5}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 6}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 7}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 8}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 9}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 10}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 11}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 12}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 13}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 14}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] The 'Loan' entity with key '{LoanID: 15}' tracked by 'LibraryContext' changed state from '"Added"' to '"Unchanged"'.
2025-03-27 01:44:00.384 +00:00 [DBG] SaveChanges completed for 'LibraryContext' with 15 entities written to the database.
2025-03-27 01:44:00.385 +00:00 [DBG] SaveChanges starting for 'LibraryContext'.
2025-03-27 01:44:00.385 +00:00 [DBG] DetectChanges starting for 'LibraryContext'.
2025-03-27 01:44:00.385 +00:00 [DBG] DetectChanges completed for 'LibraryContext'.
2025-03-27 01:44:00.385 +00:00 [DBG] SaveChanges completed for 'LibraryContext' with 0 entities written to the database.
2025-03-27 01:44:00.385 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:44:00.385 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.385 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:00.385 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.385 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:00.385 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:44:00.385 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:44:00.386 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.386 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:00.386 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:00.386 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:44:20.690 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:44:20.700 +00:00 [INF] Logger configured.
2025-03-27 01:44:20.730 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:44:20.732 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:44:20.737 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:44:20.844 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:44:20.943 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:44:21.237 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:44:21.296 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:44:21.301 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:44:21.310 +00:00 [DBG] Created DbConnection. (6ms).
2025-03-27 01:44:21.313 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:44:21.320 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:21.323 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:44:21.326 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:44:21.331 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:44:21.332 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:44:21.332 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:44:21.336 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (4ms).
2025-03-27 01:44:21.336 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (8ms).
2025-03-27 01:44:21.336 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:44:21.338 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:21.342 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:44:21.367 +00:00 [INF] Executed DbCommand (24ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:44:21.368 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:21.369 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-27 01:44:21.581 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:44:21.581 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:44:21.581 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:44:21.581 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:44:21.581 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:44:21.581 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:44:21.581 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:44:21.581 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:44:21.581 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:44:21.588 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:44:21.591 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:44:21.593 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:44:21.593 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:44:21.922 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:44:21.961 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:44:22.171 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:44:22.190 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:44:22.191 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:22.192 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:22.192 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:22.192 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:22.192 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:44:22.194 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:44:22.227 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:44:22.251 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:44:22.257 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:44:22.258 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:44:22.260 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:22.261 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 66ms reading results.
2025-03-27 01:44:22.262 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:22.262 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:44:23.972 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:44:24.000 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:44:24.003 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:44:24.003 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:44:24.004 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:24.004 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:44:24.004 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:24.004 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:44:24.004 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:44:24.004 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:44:24.004 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:24.004 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:44:24.004 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:44:24.004 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:45:30.795 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:45:30.807 +00:00 [INF] Logger configured.
2025-03-27 01:45:30.845 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:45:30.847 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:45:30.854 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:45:31.000 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:45:31.135 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:45:31.508 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:45:31.603 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:45:31.610 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:45:31.618 +00:00 [DBG] Created DbConnection. (6ms).
2025-03-27 01:45:31.622 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:45:31.630 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:45:31.632 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:45:31.636 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:45:31.640 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:45:31.640 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:45:31.641 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:45:31.644 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (4ms).
2025-03-27 01:45:31.645 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (7ms).
2025-03-27 01:45:31.645 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:45:31.646 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:45:31.651 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:45:31.671 +00:00 [INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:45:31.672 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:45:31.674 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-27 01:45:32.005 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:45:32.005 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:45:32.005 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:45:32.005 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:45:32.005 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:45:32.006 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:45:32.006 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:45:32.006 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:45:32.006 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:45:32.011 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:45:32.013 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:45:32.014 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:45:32.014 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:45:32.417 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:45:32.462 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:45:32.687 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:45:32.714 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:45:32.716 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:45:32.717 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:45:32.717 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:45:32.717 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:45:32.717 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:45:32.720 +00:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:45:32.756 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:45:32.791 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 01:45:32.799 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:45:32.800 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-27 01:45:32.801 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:45:32.801 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:45:32.801 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:45:32.801 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:45:32.801 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:45:32.804 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:45:32.805 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 83ms reading results.
2025-03-27 01:45:32.807 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:45:32.807 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:45:34.937 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:45:34.979 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:45:34.982 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:45:34.983 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:45:34.983 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:45:34.983 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:45:34.983 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:45:34.983 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:45:34.983 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:45:34.984 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:45:34.984 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:45:34.984 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:45:34.984 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:45:34.984 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:47:07.560 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:47:07.572 +00:00 [INF] Logger configured.
2025-03-27 01:47:07.666 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:47:07.668 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:47:07.673 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:47:07.809 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:47:07.962 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:47:08.594 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:47:08.724 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:47:08.732 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:47:08.739 +00:00 [DBG] Created DbConnection. (6ms).
2025-03-27 01:47:08.744 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:47:08.771 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:47:08.774 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:47:08.782 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (3ms).
2025-03-27 01:47:08.787 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:47:08.788 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:47:08.788 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:47:08.794 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (4ms).
2025-03-27 01:47:08.795 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (10ms).
2025-03-27 01:47:08.795 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:47:08.797 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:47:08.802 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:47:08.830 +00:00 [INF] Executed DbCommand (28ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:47:08.831 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:47:08.833 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-27 01:47:09.292 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:47:09.293 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:47:09.293 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:47:09.293 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:47:09.293 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:47:09.293 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:47:09.293 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:47:09.293 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:47:09.293 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:47:09.303 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:47:09.305 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:47:09.307 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:47:09.307 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:47:09.723 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:47:09.768 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:47:10.020 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:47:10.045 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:47:10.046 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:47:10.047 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:47:10.047 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:47:10.047 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:47:10.047 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:47:10.048 +00:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:47:10.080 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:47:10.106 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:47:10.115 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:47:10.116 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:47:10.119 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:47:10.120 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 70ms reading results.
2025-03-27 01:47:10.121 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:47:10.122 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:47:10.989 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:47:11.020 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:47:11.023 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:47:11.024 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:47:11.024 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:47:11.024 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:47:11.024 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:47:11.024 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:47:11.024 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:47:11.024 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:47:11.024 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:47:11.025 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:47:11.025 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:47:11.025 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:49:37.928 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:49:37.939 +00:00 [INF] Logger configured.
2025-03-27 01:49:37.971 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:49:37.973 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:49:37.979 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:49:38.111 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:49:38.236 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:49:38.715 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:49:38.826 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:49:38.833 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:49:38.841 +00:00 [DBG] Created DbConnection. (5ms).
2025-03-27 01:49:38.845 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:49:38.855 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:38.858 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:49:38.863 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:49:38.870 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:49:38.871 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:49:38.871 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:49:38.877 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (6ms).
2025-03-27 01:49:38.878 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (11ms).
2025-03-27 01:49:38.878 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:49:38.879 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:38.884 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:49:38.903 +00:00 [INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:49:38.904 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:38.905 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-27 01:49:39.167 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:49:39.167 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:49:39.167 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:49:39.167 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:49:39.168 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:49:39.168 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:49:39.168 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:49:39.168 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:49:39.168 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:49:39.172 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:49:39.177 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:49:39.181 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:49:39.181 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:49:39.616 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:49:39.676 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:49:39.930 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:49:39.945 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:49:39.946 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:39.946 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:49:39.946 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:49:39.946 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:49:39.946 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:49:39.948 +00:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:49:39.973 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:49:40.015 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 01:49:40.023 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:49:40.024 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:49:40.027 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:40.029 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 80ms reading results.
2025-03-27 01:49:40.030 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:40.031 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:49:56.131 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:49:56.140 +00:00 [INF] Logger configured.
2025-03-27 01:49:56.169 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:49:56.170 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:49:56.175 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:49:56.272 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:49:56.368 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:49:56.645 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:49:56.714 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:49:56.719 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:49:56.727 +00:00 [DBG] Created DbConnection. (5ms).
2025-03-27 01:49:56.731 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:49:56.737 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:56.739 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:49:56.742 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:49:56.747 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:49:56.747 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:49:56.747 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:49:56.751 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (4ms).
2025-03-27 01:49:56.751 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (7ms).
2025-03-27 01:49:56.752 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:49:56.753 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:56.757 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:49:56.779 +00:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:49:56.781 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:56.783 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-27 01:49:57.008 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:49:57.008 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:49:57.008 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:49:57.008 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:49:57.008 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:49:57.008 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:49:57.008 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:49:57.008 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:49:57.008 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:49:57.016 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:49:57.018 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:49:57.020 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:49:57.020 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:49:57.381 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:49:57.417 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:49:57.651 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:49:57.678 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:49:57.680 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:57.680 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:49:57.680 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:49:57.680 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:49:57.680 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:49:57.683 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:49:57.718 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:49:57.746 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 01:49:57.752 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:49:57.753 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:49:57.755 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:57.756 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 72ms reading results.
2025-03-27 01:49:57.757 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:49:57.757 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:50:00.903 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:50:00.930 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:50:00.932 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:50:00.933 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:50:00.933 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:50:00.933 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:50:00.933 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:50:00.933 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:50:00.933 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:50:00.934 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:50:00.934 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:50:00.934 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:50:00.934 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:50:00.934 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:50:05.987 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:50:05.987 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:50:05.987 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:50:05.987 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:50:05.987 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:50:05.987 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:50:05.987 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:50:05.987 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:50:05.987 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:50:05.987 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:50:05.987 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:50:05.988 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Include(m => m.LoanHistory)'
2025-03-27 01:50:05.989 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-27 01:50:05.999 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:50:06.000 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:50:06.000 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:50:06.000 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:50:06.000 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:50:06.000 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:50:06.000 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:50:06.001 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:50:06.003 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-27 01:50:06.004 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 01:50:06.008 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-27 01:50:06.008 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 01:50:06.008 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:50:06.008 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 7ms reading results.
2025-03-27 01:50:06.008 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:50:06.008 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:51:15.509 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:51:15.519 +00:00 [INF] Logger configured.
2025-03-27 01:51:15.555 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:51:15.557 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:51:15.563 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:51:15.692 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:51:15.841 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:51:16.347 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:51:16.438 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:51:16.445 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:51:16.452 +00:00 [DBG] Created DbConnection. (6ms).
2025-03-27 01:51:16.456 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:51:16.461 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:16.463 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:51:16.465 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:51:16.476 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:51:16.478 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:51:16.478 +00:00 [DBG] Created DbConnection. (1ms).
2025-03-27 01:51:16.483 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (7ms).
2025-03-27 01:51:16.484 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (12ms).
2025-03-27 01:51:16.484 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:51:16.488 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:16.495 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:51:16.519 +00:00 [INF] Executed DbCommand (25ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:51:16.521 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:16.522 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (1ms).
2025-03-27 01:51:16.763 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:51:16.763 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:51:16.763 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:51:16.763 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:51:16.763 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:51:16.764 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:51:16.764 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:51:16.764 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:51:16.764 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:51:16.771 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:51:16.773 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:51:16.775 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:51:16.775 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:51:17.173 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:51:17.213 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:51:17.473 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:51:17.497 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:51:17.498 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:17.499 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:51:17.499 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:51:17.499 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:51:17.499 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:51:17.501 +00:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:51:17.530 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:51:17.567 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 01:51:17.576 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:51:17.576 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:51:17.577 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:51:17.580 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:17.582 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 79ms reading results.
2025-03-27 01:51:17.583 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:17.584 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:51:26.575 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:51:26.600 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()'
2025-03-27 01:51:26.603 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Loans AS l, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:51:26.603 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:51:26.604 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:26.604 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:51:26.604 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:51:26.604 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:51:26.604 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:51:26.604 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:51:26.604 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:26.604 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:51:26.604 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:26.604 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:51:49.630 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:51:49.630 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:49.630 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:51:49.630 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:51:49.630 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:51:49.631 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:51:49.631 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Loans" AS "l"
2025-03-27 01:51:49.631 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:49.631 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 01:51:49.631 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:49.631 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:51:49.632 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Include(m => m.LoanHistory)'
2025-03-27 01:51:49.632 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-27 01:51:49.640 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:51:49.641 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:51:49.641 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:49.641 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:51:49.641 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:51:49.641 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:51:49.641 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:51:49.642 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 01:51:49.644 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-27 01:51:49.645 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 01:51:49.648 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-27 01:51:49.648 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 01:51:49.649 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-27 01:51:49.649 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 01:51:49.649 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-27 01:51:49.649 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 01:51:49.649 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:49.649 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 7ms reading results.
2025-03-27 01:51:49.649 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:51:49.649 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:54:21.901 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 01:54:21.910 +00:00 [INF] Logger configured.
2025-03-27 01:54:21.944 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 01:54:21.947 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 01:54:21.952 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 01:54:22.070 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 01:54:22.209 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 01:54:22.619 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 01:54:22.727 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 01:54:22.733 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:54:22.750 +00:00 [DBG] Created DbConnection. (12ms).
2025-03-27 01:54:22.756 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:54:22.767 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:54:22.770 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 01:54:22.775 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:54:22.781 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 01:54:22.781 +00:00 [DBG] Creating DbConnection.
2025-03-27 01:54:22.781 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 01:54:22.785 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (4ms).
2025-03-27 01:54:22.786 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (8ms).
2025-03-27 01:54:22.786 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:54:22.788 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:54:22.797 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:54:22.819 +00:00 [INF] Executed DbCommand (25ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 01:54:22.820 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:54:22.823 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-27 01:54:23.095 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 01:54:23.095 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 01:54:23.095 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 01:54:23.096 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 01:54:23.096 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 01:54:23.096 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 01:54:23.096 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 01:54:23.096 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 01:54:23.096 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 01:54:23.107 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 01:54:23.109 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 01:54:23.111 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 01:54:23.111 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 01:54:23.489 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 01:54:23.541 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 01:54:23.791 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:54:23.814 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:54:23.815 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:54:23.815 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:54:23.815 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:54:23.815 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:54:23.815 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:54:23.816 +00:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 01:54:23.839 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 01:54:23.865 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 01:54:23.873 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 01:54:23.873 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 01:54:23.873 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 01:54:23.874 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 01:54:23.878 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:54:23.879 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 61ms reading results.
2025-03-27 01:54:23.881 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:54:23.881 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 01:54:35.718 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 01:54:35.740 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()
    .Include(l => l.Book)
    .Include(l => l.Borrower)'
2025-03-27 01:54:35.744 +00:00 [DBG] Including navigation: 'Loan.Book'.
2025-03-27 01:54:35.745 +00:00 [DBG] Including navigation: 'Loan.Borrower'.
2025-03-27 01:54:35.754 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        Book entity;
        LibraryMember entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        entity = 
        {
            MaterializationContext materializationContext2;
            IEntityType entityType2;
            Book instance2;
            InternalEntityEntry entry2;
            bool hasNullKey2;
            materializationContext2 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance2 = default(Book);
            entry2 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(6) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey2);
            !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
            {
                entityType2 = entry2.EntityType;
                return instance2 = (Book)entry2.Entity;
            } : 
            {
                ISnapshot shadowSnapshot2;
                shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType2 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                instance2 = switch (entityType2)
                {
                    case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                        {
                            return 
                            {
                                Book instance;
                                instance = new Book();
                                instance.<Id>k__BackingField = dataReader.GetInt32(6);
                                instance.<Author>k__BackingField = dataReader.GetString(7);
                                instance.<Description>k__BackingField = dataReader.GetString(8);
                                instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(9));
                                instance.<ISBN>k__BackingField = dataReader.GetString(10);
                                instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(11);
                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(12));
                                instance.<Title>k__BackingField = dataReader.GetString(13);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext2.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Book)
                }
                ;
                entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType2, 
                    entity: instance2, 
                    snapshot: shadowSnapshot2);
                return instance2;
            } : default(void);
            return instance2;
        };
        entity = 
        {
            MaterializationContext materializationContext3;
            IEntityType entityType3;
            LibraryMember instance3;
            InternalEntityEntry entry3;
            bool hasNullKey3;
            materializationContext3 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance3 = default(LibraryMember);
            entry3 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(14) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey3);
            !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
            {
                entityType3 = entry3.EntityType;
                return instance3 = (LibraryMember)entry3.Entity;
            } : 
            {
                ISnapshot shadowSnapshot3;
                shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType3 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                instance3 = switch (entityType3)
                {
                    case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                        {
                            return 
                            {
                                LibraryMember instance;
                                instance = new LibraryMember();
                                instance.<Id>k__BackingField = dataReader.GetInt32(14);
                                instance.<Email>k__BackingField = dataReader.GetString(15);
                                instance.<Name>k__BackingField = dataReader.GetString(16);
                                instance.<PhoneNumber>k__BackingField = dataReader.GetString(17);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext3.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(LibraryMember)
                }
                ;
                entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType3, 
                    entity: instance3, 
                    snapshot: shadowSnapshot3);
                return instance3;
            } : default(void);
            return instance3;
        };
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, Book>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
            fixup: (namelessParameter{13}, namelessParameter{14}) => 
            {
                namelessParameter{13}.<Book>k__BackingField = namelessParameter{14};
                return [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{14}, 
                    value: namelessParameter{13}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, LibraryMember>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                namelessParameter{18}.<Borrower>k__BackingField = namelessParameter{19};
                return [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{19}, 
                    value: namelessParameter{18}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 01:54:35.756 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 01:54:35.756 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:54:35.756 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 01:54:35.756 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:54:35.756 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 01:54:35.756 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-27 01:54:35.757 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-27 01:54:35.759 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-27 01:54:35.760 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 01:54:35.763 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-27 01:54:35.763 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 01:54:35.763 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:54:35.763 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 6ms reading results.
2025-03-27 01:54:35.763 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 01:54:35.763 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 02:24:00.924 +00:00 [INF]  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
2025-03-27 02:24:00.937 +00:00 [INF] Logger configured.
2025-03-27 02:24:00.982 +00:00 [INF] (App.xaml.cs): Registering Dependency injection services.
2025-03-27 02:24:00.984 +00:00 [INF] (App.xaml.cs): Dependency injection services registered.
2025-03-27 02:24:00.993 +00:00 [INF] (App.xaml.cs): Service provider built successfully.
2025-03-27 02:24:01.143 +00:00 [INF] (App.xaml.cs): CRUD Library Starting up
2025-03-27 02:24:01.292 +00:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-03-27 02:24:01.690 +00:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
2025-03-27 02:24:01.789 +00:00 [DBG] Entity Framework Core 9.0.2 initialized 'LibraryContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite:9.0.2' with options: SensitiveDataLoggingEnabled 
2025-03-27 02:24:01.801 +00:00 [DBG] Creating DbConnection.
2025-03-27 02:24:01.809 +00:00 [DBG] Created DbConnection. (7ms).
2025-03-27 02:24:01.812 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 02:24:01.827 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:01.835 +00:00 [DBG] Disposing connection to database 'main' on server 'library.db'.
2025-03-27 02:24:01.841 +00:00 [DBG] Disposed connection to database 'main' on server 'library.db' (1ms).
2025-03-27 02:24:01.852 +00:00 [DBG] Creating DbCommand for 'ExecuteScalar'.
2025-03-27 02:24:01.852 +00:00 [DBG] Creating DbConnection.
2025-03-27 02:24:01.852 +00:00 [DBG] Created DbConnection. (0ms).
2025-03-27 02:24:01.860 +00:00 [DBG] Created DbCommand for 'ExecuteScalar' (10ms).
2025-03-27 02:24:01.861 +00:00 [DBG] Initialized DbCommand for 'ExecuteScalar' (15ms).
2025-03-27 02:24:01.861 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 02:24:01.865 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:01.875 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 02:24:01.903 +00:00 [INF] Executed DbCommand (31ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*) FROM "sqlite_master" WHERE "type" = 'table' AND "rootpage" IS NOT NULL;
2025-03-27 02:24:01.904 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:01.906 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (2ms).
2025-03-27 02:24:02.298 +00:00 [INF] (MainWindowViewModel.cs): Pages successfully instantiated successfully.
2025-03-27 02:24:02.298 +00:00 [INF] (MainWindowViewModel.cs): Navigation commands initialized.
2025-03-27 02:24:02.298 +00:00 [INF] (MainWindowViewModel.cs): MainWindowViewModel constructed
2025-03-27 02:24:02.298 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindowViewModel
2025-03-27 02:24:02.298 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPageViewModel
2025-03-27 02:24:02.298 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPageViewModel
2025-03-27 02:24:02.298 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryContext
2025-03-27 02:24:02.298 +00:00 [DBG] (App.xaml.cs): Resolved service: LibraryService
2025-03-27 02:24:02.298 +00:00 [DBG] (App.xaml.cs): Resolved service: IWindowService
2025-03-27 02:24:02.306 +00:00 [DBG] (App.xaml.cs): Resolved service: MainWindow
2025-03-27 02:24:02.308 +00:00 [DBG] (App.xaml.cs): Resolved service: InventoryPage
2025-03-27 02:24:02.311 +00:00 [DBG] (App.xaml.cs): Resolved service: MembersPage
2025-03-27 02:24:02.313 +00:00 [DBG] (App.xaml.cs): Resolved service: LoansPage
2025-03-27 02:24:02.313 +00:00 [INF] (App.xaml.cs): Starting MainWindow
2025-03-27 02:24:02.784 +00:00 [DBG] Compiling query expression: 
'DbSet<Book>()
    .Include(m => m.Loans)'
2025-03-27 02:24:02.845 +00:00 [DBG] Including navigation: 'Book.Loans'.
2025-03-27 02:24:03.114 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Book>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Book.Author (string) Required, 1], [Property: Book.Description (string) Required, 2], [Property: Book.Genre (BookGenre) Required, 3], [Property: Book.ISBN (string) Required, 4], [Property: Book.PublicationDate (DateTime) Required, 5], [Property: Book.Status (BookStatus) Required, 6], [Property: Book.Title (string) Required, 7] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 8], [Property: Loan.BookID (int) Required FK Index, 9], [Property: Loan.BorrowerID (int) Required FK Index, 10], [Property: Loan.DueDate (DateTime) Required, 11], [Property: Loan.LoanDate (DateTime) Required, 12], [Property: Loan.ReturnDate (DateTime?), 13] }
            3 -> 8
        SELECT b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Books AS b
        LEFT JOIN Loans AS l ON b.Id == l.BookID
        ORDER BY b.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            Book entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                Book instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(Book);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (Book)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                            {
                                return 
                                {
                                    Book instance;
                                    instance = new Book();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Author>k__BackingField = dataReader.GetString(1);
                                    instance.<Description>k__BackingField = dataReader.GetString(2);
                                    instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(3));
                                    instance.<ISBN>k__BackingField = dataReader.GetString(4);
                                    instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(5);
                                    instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));
                                    instance.<Title>k__BackingField = dataReader.GetString(7);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(Book)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<Book, Book>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (Book)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<Book, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(8) ? default(int?) : (int?)dataReader.GetInt32(8) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(8) ? default(object) : (object)dataReader.GetInt32(8) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(8) ? default(int) : dataReader.GetInt32(8);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(9) ? default(int) : dataReader.GetInt32(9);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(10) ? default(int) : dataReader.GetInt32(10);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(11) ? default(DateTime) : dataReader.GetDateTime(11);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(12) ? default(DateTime) : dataReader.GetDateTime(12);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(13) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(13);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            fixup: (namelessParameter{11}, namelessParameter{12}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{13} => namelessParameter{13}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{11}, 
                    value: namelessParameter{12}, 
                    forMaterialization: True);
                return namelessParameter{12}.<Book>k__BackingField = namelessParameter{11};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (Book)(resultContext.Values[0]) : default(Book);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 02:24:03.144 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 02:24:03.145 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:03.146 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 02:24:03.146 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 02:24:03.146 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 02:24:03.146 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 02:24:03.149 +00:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Books" AS "b"
LEFT JOIN "Loans" AS "l" ON "b"."Id" = "l"."BookID"
ORDER BY "b"."Id"
2025-03-27 02:24:03.191 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 1}'.
2025-03-27 02:24:03.233 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 1}'.
2025-03-27 02:24:03.247 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 2}'.
2025-03-27 02:24:03.247 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 2}'.
2025-03-27 02:24:03.247 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 3}'.
2025-03-27 02:24:03.247 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 3}'.
2025-03-27 02:24:03.247 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 4}'.
2025-03-27 02:24:03.247 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 4}'.
2025-03-27 02:24:03.247 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 5}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 5}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 6}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 6}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 7}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 7}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 8}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 8}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 9}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 9}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 10}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 10}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 11}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 11}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 12}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 12}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 13}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 13}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 14}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 14}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 15}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Loan' entity with key '{LoanID: 15}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 16}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 17}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 18}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 19}'.
2025-03-27 02:24:03.248 +00:00 [DBG] Context 'LibraryContext' started tracking 'Book' entity with key '{Id: 20}'.
2025-03-27 02:24:03.253 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:03.254 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 103ms reading results.
2025-03-27 02:24:03.256 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:03.256 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 02:24:06.117 +00:00 [INF] (MainWindowViewModel.cs): Navigating to _loansPage.
2025-03-27 02:24:06.150 +00:00 [DBG] Compiling query expression: 
'DbSet<Loan>()
    .Include(l => l.Book)
    .Include(l => l.Borrower)'
2025-03-27 02:24:06.155 +00:00 [DBG] Including navigation: 'Loan.Book'.
2025-03-27 02:24:06.156 +00:00 [DBG] Including navigation: 'Loan.Borrower'.
2025-03-27 02:24:06.190 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Loan>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Loan.BookID (int) Required FK Index, 1], [Property: Loan.BorrowerID (int) Required FK Index, 2], [Property: Loan.DueDate (DateTime) Required, 3], [Property: Loan.LoanDate (DateTime) Required, 4], [Property: Loan.ReturnDate (DateTime?), 5] }
            1 -> Dictionary<IProperty, int> { [Property: Book.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 6], [Property: Book.Author (string) Required, 7], [Property: Book.Description (string) Required, 8], [Property: Book.Genre (BookGenre) Required, 9], [Property: Book.ISBN (string) Required, 10], [Property: Book.PublicationDate (DateTime) Required, 11], [Property: Book.Status (BookStatus) Required, 12], [Property: Book.Title (string) Required, 13] }
            2 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 14], [Property: LibraryMember.Email (string) Required, 15], [Property: LibraryMember.Name (string) Required, 16], [Property: LibraryMember.PhoneNumber (string) Required, 17] }
        SELECT l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate, b.Id, b.Author, b.Description, b.Genre, b.ISBN, b.PublicationDate, b.Status, b.Title, m.Id, m.Email, m.Name, m.PhoneNumber
        FROM Loans AS l
        INNER JOIN Books AS b ON l.BookID == b.Id
        INNER JOIN Members AS m ON l.BorrowerID == m.Id, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        Loan entity;
        Book entity;
        LibraryMember entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            Loan instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(Loan);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (Loan)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                        {
                            return 
                            {
                                Loan instance;
                                instance = new Loan();
                                instance.<LoanID>k__BackingField = dataReader.GetInt32(0);
                                instance.<BookID>k__BackingField = dataReader.GetInt32(1);
                                instance.<BorrowerID>k__BackingField = dataReader.GetInt32(2);
                                instance.<DueDate>k__BackingField = dataReader.GetDateTime(3);
                                instance.<LoanDate>k__BackingField = dataReader.GetDateTime(4);
                                instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(5) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(5);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Loan)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        entity = 
        {
            MaterializationContext materializationContext2;
            IEntityType entityType2;
            Book instance2;
            InternalEntityEntry entry2;
            bool hasNullKey2;
            materializationContext2 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance2 = default(Book);
            entry2 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: Book.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(6) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey2);
            !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
            {
                entityType2 = entry2.EntityType;
                return instance2 = (Book)entry2.Entity;
            } : 
            {
                ISnapshot shadowSnapshot2;
                shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType2 = [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")];
                instance2 = switch (entityType2)
                {
                    case [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]: 
                        {
                            return 
                            {
                                Book instance;
                                instance = new Book();
                                instance.<Id>k__BackingField = dataReader.GetInt32(6);
                                instance.<Author>k__BackingField = dataReader.GetString(7);
                                instance.<Description>k__BackingField = dataReader.GetString(8);
                                instance.<Genre>k__BackingField = Invoke(((EnumToNumberConverter<BookGenre, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Genre (BookGenre) Required | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Genre")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(9));
                                instance.<ISBN>k__BackingField = dataReader.GetString(10);
                                instance.<PublicationDate>k__BackingField = dataReader.GetDateTime(11);
                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<BookStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Book.Status (BookStatus) Required | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindProperty("Status")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(12));
                                instance.<Title>k__BackingField = dataReader.GetString(13);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext2.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: Book | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(Book)
                }
                ;
                entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType2, 
                    entity: instance2, 
                    snapshot: shadowSnapshot2);
                return instance2;
            } : default(void);
            return instance2;
        };
        entity = 
        {
            MaterializationContext materializationContext3;
            IEntityType entityType3;
            LibraryMember instance3;
            InternalEntityEntry entry3;
            bool hasNullKey3;
            materializationContext3 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance3 = default(LibraryMember);
            entry3 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(14) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey3);
            !(hasNullKey3) ? entry3 != default(InternalEntityEntry) ? 
            {
                entityType3 = entry3.EntityType;
                return instance3 = (LibraryMember)entry3.Entity;
            } : 
            {
                ISnapshot shadowSnapshot3;
                shadowSnapshot3 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType3 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                instance3 = switch (entityType3)
                {
                    case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{9} => namelessParameter{9}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                        {
                            return 
                            {
                                LibraryMember instance;
                                instance = new LibraryMember();
                                instance.<Id>k__BackingField = dataReader.GetInt32(14);
                                instance.<Email>k__BackingField = dataReader.GetString(15);
                                instance.<Name>k__BackingField = dataReader.GetString(16);
                                instance.<PhoneNumber>k__BackingField = dataReader.GetString(17);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext3.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(LibraryMember)
                }
                ;
                entry3 = entityType3 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType3, 
                    entity: instance3, 
                    snapshot: shadowSnapshot3);
                return instance3;
            } : default(void);
            return instance3;
        };
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, Book>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Book (Book) ToPrincipal Book Inverse: Loans | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Book")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: Book.Loans (ICollection<Loan>) Collection ToDependent Loan Inverse: Book | Resolver: namelessParameter{12} => namelessParameter{12}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans")], 
            fixup: (namelessParameter{13}, namelessParameter{14}) => 
            {
                namelessParameter{13}.<Book>k__BackingField = namelessParameter{14};
                return [LIFTABLE Constant: ClrICollectionAccessor<Book, ICollection<Loan>, Loan> | Resolver: namelessParameter{15} => namelessParameter{15}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Book").FindNavigation("Loans").GetCollectionAccessor()].Add(
                    entity: namelessParameter{14}, 
                    value: namelessParameter{13}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        ShaperProcessingExpressionVisitor.IncludeReference<Loan, Loan, LibraryMember>(
            queryContext: queryContext, 
            entity: entity, 
            relatedEntity: entity, 
            navigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{16} => namelessParameter{16}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            inverseNavigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{17} => namelessParameter{17}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
            fixup: (namelessParameter{18}, namelessParameter{19}) => 
            {
                namelessParameter{18}.<Borrower>k__BackingField = namelessParameter{19};
                return [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{20} => namelessParameter{20}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{19}, 
                    value: namelessParameter{18}, 
                    forMaterialization: True);
            }, 
            trackingQuery: True);
        return entity;
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 02:24:06.193 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 02:24:06.193 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:06.194 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 02:24:06.194 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 02:24:06.194 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 02:24:06.194 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-27 02:24:06.194 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-27 02:24:06.198 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 1}' was detected as changed.
2025-03-27 02:24:06.201 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 1}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 2}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 2}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 3}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 3}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 4}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 4}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 5}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 5}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 6}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 6}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 7}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 7}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 8}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 8}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 9}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 9}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 10}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 10}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 11}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 11}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 12}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 12}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 13}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 13}'.
2025-03-27 02:24:06.207 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 14}' was detected as changed.
2025-03-27 02:24:06.207 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 14}'.
2025-03-27 02:24:06.208 +00:00 [DBG] The navigation 'Loan.Borrower' for entity with key '{LoanID: 15}' was detected as changed.
2025-03-27 02:24:06.208 +00:00 [DBG] Context 'LibraryContext' started tracking 'LibraryMember' entity with key '{Id: 15}'.
2025-03-27 02:24:06.208 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:06.208 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 13ms reading results.
2025-03-27 02:24:06.208 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:06.208 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 02:24:57.441 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 02:24:57.441 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:57.441 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 02:24:57.441 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 02:24:57.441 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 02:24:57.441 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-27 02:24:57.441 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate", "b"."Id", "b"."Author", "b"."Description", "b"."Genre", "b"."ISBN", "b"."PublicationDate", "b"."Status", "b"."Title", "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber"
FROM "Loans" AS "l"
INNER JOIN "Books" AS "b" ON "l"."BookID" = "b"."Id"
INNER JOIN "Members" AS "m" ON "l"."BorrowerID" = "m"."Id"
2025-03-27 02:24:57.442 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:57.442 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 0ms reading results.
2025-03-27 02:24:57.442 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:57.442 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
2025-03-27 02:24:57.443 +00:00 [DBG] Compiling query expression: 
'DbSet<LibraryMember>()
    .Include(m => m.LoanHistory)'
2025-03-27 02:24:57.443 +00:00 [DBG] Including navigation: 'LibraryMember.LoanHistory'.
2025-03-27 02:24:57.451 +00:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<LibraryMember>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: LibraryMember.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: LibraryMember.Email (string) Required, 1], [Property: LibraryMember.Name (string) Required, 2], [Property: LibraryMember.PhoneNumber (string) Required, 3] }
            1 -> 0
            2 -> Dictionary<IProperty, int> { [Property: Loan.LoanID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 4], [Property: Loan.BookID (int) Required FK Index, 5], [Property: Loan.BorrowerID (int) Required FK Index, 6], [Property: Loan.DueDate (DateTime) Required, 7], [Property: Loan.LoanDate (DateTime) Required, 8], [Property: Loan.ReturnDate (DateTime?), 9] }
            3 -> 4
        SELECT m.Id, m.Email, m.Name, m.PhoneNumber, l.LoanID, l.BookID, l.BorrowerID, l.DueDate, l.LoanDate, l.ReturnDate
        FROM Members AS m
        LEFT JOIN Loans AS l ON m.Id == l.BorrowerID
        ORDER BY m.Id ASC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        resultContext.Values == null ? 
        {
            LibraryMember entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                LibraryMember instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(LibraryMember);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: LibraryMember.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (LibraryMember)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]: 
                            {
                                return 
                                {
                                    LibraryMember instance;
                                    instance = new LibraryMember();
                                    instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                    instance.<Email>k__BackingField = dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.GetString(2);
                                    instance.<PhoneNumber>k__BackingField = dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: LibraryMember | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(LibraryMember)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            resultContext.Values = new object[]{ entity };
            ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LibraryMember, LibraryMember>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                entity: (LibraryMember)(resultContext.Values[0]), 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
                navigation: [LIFTABLE Constant: Navigation: LibraryMember.LoanHistory (ICollection<Loan>) Collection ToDependent Loan Inverse: Borrower | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory")], 
                clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()], 
                trackingQuery: True, 
                setLoaded: True);
        } : default(void);
        ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LibraryMember, Loan>(
            collectionId: 0, 
            queryContext: queryContext, 
            dbDataReader: dataReader, 
            resultCoordinator: resultCoordinator, 
            parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)(int?)dataReader.GetInt32(0) }], 
            selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ (object)dataReader.IsDBNull(4) ? default(int?) : (int?)dataReader.GetInt32(4) }], 
            parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (int)left == (int)right }], 
            innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
            {
                Loan entity;
                entity = 
                {
                    MaterializationContext materializationContext2;
                    IEntityType entityType2;
                    Loan instance2;
                    InternalEntityEntry entry2;
                    bool hasNullKey2;
                    materializationContext2 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance2 = default(Loan);
                    entry2 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: Loan.LoanID PK | Resolver: c => c.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindPrimaryKey()], 
                        keyValues: new object[]{ dataReader.IsDBNull(4) ? default(object) : (object)dataReader.GetInt32(4) }, 
                        throwOnNullKey: False, 
                        hasNullKey: hasNullKey2);
                    !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                    {
                        entityType2 = entry2.EntityType;
                        return instance2 = (Loan)entry2.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot2;
                        shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType2 = [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")];
                        instance2 = switch (entityType2)
                        {
                            case [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]: 
                                {
                                    return 
                                    {
                                        Loan instance;
                                        instance = new Loan();
                                        instance.<LoanID>k__BackingField = dataReader.IsDBNull(4) ? default(int) : dataReader.GetInt32(4);
                                        instance.<BookID>k__BackingField = dataReader.IsDBNull(5) ? default(int) : dataReader.GetInt32(5);
                                        instance.<BorrowerID>k__BackingField = dataReader.IsDBNull(6) ? default(int) : dataReader.GetInt32(6);
                                        instance.<DueDate>k__BackingField = dataReader.IsDBNull(7) ? default(DateTime) : dataReader.GetDateTime(7);
                                        instance.<LoanDate>k__BackingField = dataReader.IsDBNull(8) ? default(DateTime) : dataReader.GetDateTime(8);
                                        instance.<ReturnDate>k__BackingField = dataReader.IsDBNull(9) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(9);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext2.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: Loan | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(Loan)
                        }
                        ;
                        entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType2, 
                            entity: instance2, 
                            snapshot: shadowSnapshot2);
                        return instance2;
                    } : default(void);
                    return instance2;
                };
                return entity;
            }, 
            inverseNavigation: [LIFTABLE Constant: Navigation: Loan.Borrower (LibraryMember) ToPrincipal LibraryMember Inverse: LoanHistory | Resolver: namelessParameter{8} => namelessParameter{8}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.Loan").FindNavigation("Borrower")], 
            fixup: (namelessParameter{9}, namelessParameter{10}) => 
            {
                [LIFTABLE Constant: ClrICollectionAccessor<LibraryMember, ICollection<Loan>, Loan> | Resolver: namelessParameter{11} => namelessParameter{11}.Dependencies.Model.FindEntityType("CRUDLibrary.Models.LibraryModels.LibraryMember").FindNavigation("LoanHistory").GetCollectionAccessor()].Add(
                    entity: namelessParameter{9}, 
                    value: namelessParameter{10}, 
                    forMaterialization: True);
                return namelessParameter{10}.<Borrower>k__BackingField = namelessParameter{9};
            }, 
            trackingQuery: True);
        return IsTrue(resultCoordinator.ResultReady)
         ? (LibraryMember)(resultContext.Values[0]) : default(LibraryMember);
    }, 
    contextType: CRUDLibrary.Models.DBModels.LibraryContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-03-27 02:24:57.452 +00:00 [DBG] Opening connection to database 'main' on server 'library.db'.
2025-03-27 02:24:57.453 +00:00 [DBG] Opened connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:57.453 +00:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-03-27 02:24:57.453 +00:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-03-27 02:24:57.453 +00:00 [DBG] Initialized DbCommand for 'ExecuteReader' (0ms).
2025-03-27 02:24:57.453 +00:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 02:24:57.453 +00:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "m"."Id", "m"."Email", "m"."Name", "m"."PhoneNumber", "l"."LoanID", "l"."BookID", "l"."BorrowerID", "l"."DueDate", "l"."LoanDate", "l"."ReturnDate"
FROM "Members" AS "m"
LEFT JOIN "Loans" AS "l" ON "m"."Id" = "l"."BorrowerID"
ORDER BY "m"."Id"
2025-03-27 02:24:57.454 +00:00 [DBG] Closing data reader to 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:57.454 +00:00 [DBG] A data reader for 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db' is being disposed after spending 1ms reading results.
2025-03-27 02:24:57.454 +00:00 [DBG] Closing connection to database 'main' on server 'C:\Users\Isaac\source\repos\CRUDLibrary\CRUDLibrary\bin\Debug\net8.0-windows\library.db'.
2025-03-27 02:24:57.454 +00:00 [DBG] Closed connection to database 'main' on server 'library.db' (0ms).
